generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String
  role          UserRole
  isActive      Boolean        @default(true)
  companyId     Int?
  employeeId    Int?           @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lastLoginAt   DateTime?
  firstName     String?
  lastName      String?
  phone         String?
  photoUrl      String?
  setupToken    String?        @unique
  setupTokenExpiry DateTime?
  refreshTokens RefreshToken[]
  company       Company?       @relation(fields: [companyId], references: [id])
  employee      Employee?      @relation(fields: [employeeId], references: [id])
  vinculacionesJefe VinculacionJefe[]

  @@index([email, isActive])
  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model InvitationToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  email     String
  companyId Int
  used      Boolean   @default(false)
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  metadata  Json?
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([token, used])
  @@map("invitation_tokens")
}

model Employee {
  id               Int            @id @default(autoincrement())
  employeeNumber   String         @unique
  name             String
  email            String?
  rfc              String         @unique
  position         String
  department       String
  status           EmployeeStatus @default(ACTIVE)
  hireDate         DateTime
  contractType     ContractType
  workSchedule     String?
  baseSalary       Decimal        @db.Decimal(10, 2)
  dateOfBirth      DateTime?
  address          String?
  phone            String?
  emergencyContact String?
  bankName         String?
  bankAccount      String?
  clabe            String?
  taxRegime        String?
  companyId        Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  company          Company        @relation(fields: [companyId], references: [id])
  incidences       Incidence[]
  payrollItems     PayrollItem[]
  user             User?
  workerDetails    WorkerDetails?
  esJefe           VinculacionJefe?
  jefeAsignado     VinculacionJefeEmpleado[]

  @@index([companyId, status])
  @@map("employees")
}

model Calendar {
  id        Int      @id @default(autoincrement())
  name      String
  year      Int
  workDays  Json
  holidays  Json
  isDefault Boolean  @default(false)
  companyId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, year])
  @@map("calendars")
}

model Payroll {
  id              Int            @id @default(autoincrement())
  period          String
  periodStart     DateTime
  periodEnd       DateTime
  status          PayrollStatus  @default(DRAFT)
  totalGross      Decimal        @db.Decimal(12, 2)
  totalDeductions Decimal        @db.Decimal(12, 2)
  totalNet        Decimal        @db.Decimal(12, 2)
  employeeCount   Int
  processedAt     DateTime?
  authorizedAt    DateTime?
  authorizedBy    String?
  xmlPath         String?
  pdfPath         String?
  companyId       Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  incidences      Incidence[]
  notifications   Notification[]
  payrollItems    PayrollItem[]
  company         Company        @relation(fields: [companyId], references: [id])

  @@index([companyId, status])
  @@index([periodStart, periodEnd])
  @@map("payrolls")
}

model PayrollItem {
  id              Int        @id @default(autoincrement())
  baseSalary      Decimal    @db.Decimal(10, 2)
  overtime        Decimal    @default(0) @db.Decimal(10, 2)
  bonuses         Decimal    @default(0) @db.Decimal(10, 2)
  totalGross      Decimal    @db.Decimal(10, 2)
  incomeTax       Decimal    @default(0) @db.Decimal(10, 2)
  socialSecurity  Decimal    @default(0) @db.Decimal(10, 2)
  otherDeductions Decimal    @default(0) @db.Decimal(10, 2)
  totalDeductions Decimal    @db.Decimal(10, 2)
  netSalary       Decimal    @db.Decimal(10, 2)
  workedDays      Int
  cfdiStatus      CFDIStatus @default(PENDING)
  cfdiUuid        String?
  cfdiXmlPath     String?
  cfdiPdfPath     String?
  employeeId      Int
  payrollId       Int
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  employee        Employee   @relation(fields: [employeeId], references: [id])
  payroll         Payroll    @relation(fields: [payrollId], references: [id])

  @@unique([employeeId, payrollId])
  @@map("payroll_items")
}

model Incidence {
  id          Int             @id @default(autoincrement())
  type        IncidenceType
  date        DateTime
  quantity    Decimal         @db.Decimal(8, 2)
  amount      Decimal?        @db.Decimal(10, 2)
  description String?
  status      IncidenceStatus @default(PENDING)
  employeeId  Int
  companyId   Int
  payrollId   Int?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  company     Company         @relation(fields: [companyId], references: [id])
  employee    Employee        @relation(fields: [employeeId], references: [id])
  payroll     Payroll?        @relation(fields: [payrollId], references: [id])

  @@index([companyId, date])
  @@index([employeeId, type])
  @@map("incidences")
}

model Notification {
  id        Int                  @id @default(autoincrement())
  type      NotificationType
  title     String
  message   String
  priority  NotificationPriority @default(NORMAL)
  read      Boolean              @default(false)
  metadata  Json?
  companyId Int?
  payrollId Int?
  createdAt DateTime             @default(now())
  readAt    DateTime?
  company   Company?             @relation(fields: [companyId], references: [id])
  payroll   Payroll?             @relation(fields: [payrollId], references: [id])

  @@index([companyId, read])
  @@map("notifications")
}

model TaxRegime {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  name        String
  tipoPersona String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cat_tax_regimes")
}

model EconomicActivity {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cat_economic_activities")
}

model PostalCode {
  id           Int      @id @default(autoincrement())
  postalCode   String   @db.VarChar(5)
  neighborhood String
  city         String
  state        String
  municipality String
  country      String   @default("MÃ©xico")
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([postalCode])
  @@map("cat_postal_codes")
}

model State {
  id               Int                    @id @default(autoincrement())
  code             String                 @unique @db.VarChar(3)
  name             String
  abbreviation     String                 @db.VarChar(10)
  isActive         Boolean                @default(true)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  ciudades         Ciudad[]
  colonias         Colonia[]
  imssDelegaciones IMSSDelegacion[]
  municipios       Municipio[]
  notarialPowers   CompanyNotarialPower[]
  imssDomicilios   IMSSDomicilio[]

  @@map("cat_states")
}

model IdentificationType {
  id                          Int                          @id @default(autoincrement())
  code                        String                       @unique
  nombre                      String
  isActive                    Boolean                      @default(true)
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  companyLegalRepresentatives CompanyLegalRepresentative[]

  @@map("cat_identification_types")
}

model Municipio {
  id                  Int                    @id @default(autoincrement())
  code                String                 @unique
  name                String
  stateCode           String                 @db.VarChar(3)
  isActive            Boolean                @default(true)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  ciudades            Ciudad[]
  colonias            Colonia[]
  imssSubdelegaciones IMSSSubdelegacion[]
  state               State                  @relation(fields: [stateCode], references: [code])
  notarialPowers      CompanyNotarialPower[]
  imssDomicilios      IMSSDomicilio[]

  @@index([stateCode])
  @@map("cat_municipios")
}

model Ciudad {
  id            Int       @id @default(autoincrement())
  name          String
  municipioCode String
  stateCode     String    @db.VarChar(3)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  municipio     Municipio @relation(fields: [municipioCode], references: [code])
  state         State     @relation(fields: [stateCode], references: [code])

  @@index([municipioCode])
  @@index([stateCode])
  @@map("cat_ciudades")
}

model Colonia {
  id             Int             @id @default(autoincrement())
  name           String
  postalCode     String          @db.VarChar(5)
  cityName       String
  municipioCode  String
  stateCode      String          @db.VarChar(3)
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  municipio      Municipio       @relation(fields: [municipioCode], references: [code])
  state          State           @relation(fields: [stateCode], references: [code])
  imssDomicilios IMSSDomicilio[]

  @@index([postalCode])
  @@index([municipioCode])
  @@index([stateCode])
  @@index([cityName])
  @@map("cat_colonias")
}

model ClaseRiesgoIMSS {
  id                  Int                    @id @default(autoincrement())
  codigo              String                 @unique @map("codigo")
  nombre              String                 @map("nombre")
  descripcion         String?                @map("descripcion")
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  registrosPatronales IMSSRegistroPatronal[]

  @@map("clase_riesgo_imss")
}

model IMSSDelegacion {
  id                    Int                 @id @default(autoincrement())
  codigo                String              @unique @db.VarChar(10)
  nombre                String              @db.VarChar(100)
  entidadFederativaCode String              @db.VarChar(3)
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  state                 State               @relation(fields: [entidadFederativaCode], references: [code])
  subdelegaciones       IMSSSubdelegacion[]
  imssDomicilios        IMSSDomicilio[]

  @@index([entidadFederativaCode])
  @@map("cat_imss_delegaciones")
}

model IMSSSubdelegacion {
  id             Int             @id @default(autoincrement())
  codigo         String          @unique @db.VarChar(10)
  nombre         String          @db.VarChar(100)
  delegacionId   Int
  municipioCode  String
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  delegacion     IMSSDelegacion  @relation(fields: [delegacionId], references: [id])
  municipio      Municipio       @relation(fields: [municipioCode], references: [code])
  imssDomicilios IMSSDomicilio[]

  @@index([delegacionId])
  @@index([municipioCode])
  @@map("cat_imss_subdelegaciones")
}

model IMSSOrigenMovimiento {
  id             Int             @id @default(autoincrement())
  codigo         String          @unique @db.VarChar(10)
  nombre         String          @db.VarChar(100)
  descripcion    String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  imssDomicilios IMSSDomicilio[]

  @@map("cat_imss_origen_movimiento")
}

model IMSSDomicilio {
  id                     Int                   @id @default(autoincrement())
  imssRegistroPatronalId Int                   @unique
  usarDomicilioMatriz    Boolean               @default(false)
  codigoPostal           String?               @db.VarChar(5)
  entidadFederativaCode  String?               @db.VarChar(3)
  municipioCode          String?
  localidad              String?
  coloniaId              Int?
  delegacionId           Int?
  subdelegacionId        Int?
  calle                  String?               @db.VarChar(100)
  numeroExterior         String?               @db.VarChar(10)
  origenMovimientoId     Int?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  colonia                Colonia?              @relation(fields: [coloniaId], references: [id])
  delegacion             IMSSDelegacion?       @relation(fields: [delegacionId], references: [id])
  state                  State?                @relation(fields: [entidadFederativaCode], references: [code])
  imssRegistroPatronal   IMSSRegistroPatronal  @relation(fields: [imssRegistroPatronalId], references: [id], onDelete: Cascade)
  municipio              Municipio?            @relation(fields: [municipioCode], references: [code])
  origenMovimiento       IMSSOrigenMovimiento? @relation(fields: [origenMovimientoId], references: [id])
  subdelegacion          IMSSSubdelegacion?    @relation(fields: [subdelegacionId], references: [id])

  @@map("imss_domicilio")
}

model WizardProgress {
  id              Int               @id @default(autoincrement())
  companyId       Int               @unique
  currentSection  Int               @default(1)
  currentStep     Int               @default(1)
  isCompleted     Boolean           @default(false)
  startedAt       DateTime          @default(now())
  completedAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  sectionProgress SectionProgress[]
  company         Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("wizard_progress")
}

model SectionProgress {
  id               Int            @id @default(autoincrement())
  wizardProgressId Int
  sectionNumber    Int
  name             String
  status           String         @default("PENDING")
  startedAt        DateTime?
  completedAt      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  wizardProgress   WizardProgress @relation(fields: [wizardProgressId], references: [id], onDelete: Cascade)
  steps            StepProgress[]

  @@index([wizardProgressId])
  @@map("section_progress")
}

model StepProgress {
  id                Int             @id @default(autoincrement())
  sectionProgressId Int
  stepNumber        Int
  name              String
  status            String          @default("PENDING")
  data              Json?
  startedAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  sectionProgress   SectionProgress @relation(fields: [sectionProgressId], references: [id], onDelete: Cascade)

  @@index([sectionProgressId])
  @@map("step_progress")
}

model OrganizationalArea {
  id                 Int                        @id @default(autoincrement())
  name               String
  description        String?
  companyId          Int
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  company            Company                    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  departments        OrganizationalDepartment[]
  contractConditions WorkerContractCondition[]
  vinculacionesJefe  VinculacionJefeArea[]

  @@index([companyId])
  @@map("organizational_areas")
}

model OrganizationalDepartment {
  id                 Int                       @id @default(autoincrement())
  name               String
  description        String?
  areaId             Int?
  companyId          Int
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  area               OrganizationalArea?       @relation(fields: [areaId], references: [id])
  company            Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  positions          OrganizationalPosition[]
  contractConditions WorkerContractCondition[]
  vinculacionesJefe  VinculacionJefeDepartamento[]

  @@index([companyId])
  @@index([areaId])
  @@map("organizational_departments")
}

model OrganizationalPosition {
  id                 Int                       @id @default(autoincrement())
  name               String
  description        String?
  baseSalary         Decimal?                  @db.Decimal(10, 2)
  hierarchyLevel     String?
  departmentId       Int?
  companyId          Int
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  company            Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department         OrganizationalDepartment? @relation(fields: [departmentId], references: [id])
  contractConditions WorkerContractCondition[]
  vinculacionesJefe  VinculacionJefePuesto[]

  @@index([companyId])
  @@index([departmentId])
  @@map("organizational_positions")
}

model WorkSchedule {
  id                 Int                       @id @default(autoincrement())
  name               String
  startTime          String
  endTime            String
  workDays           Int[]
  breakHours         Int?
  companyId          Int
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  company            Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contractConditions WorkerContractCondition[]

  @@index([companyId])
  @@map("work_schedules")
}

model WorkerDetails {
  id                 Int                      @id @default(autoincrement())
  employeeId         Int                      @unique
  companyId          Int
  numeroTrabajador   Int
  nombres            String
  apellidoPaterno    String
  apellidoMaterno    String?
  fechaNacimiento    DateTime
  sexo               SexoTrabajador?
  nacionalidad       NacionalidadTrabajador?
  estadoCivil        EstadoCivilTrabajador
  rfc                String                   @db.VarChar(13)
  curp               String                   @db.VarChar(18)
  nss                String                   @db.VarChar(11)
  umf                Int?
  fotografia         String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  address            WorkerAddress?
  alimony            WorkerAlimony[]
  contractConditions WorkerContractCondition?
  company            Company                  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  employee           Employee                 @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  documents          WorkerDocument[]
  familyMembers      WorkerFamilyMember[]
  fonacotCredits     WorkerFonacotCredit[]
  infonavitCredits   WorkerInfonavitCredit[]
  paymentData        WorkerPaymentData?

  @@unique([companyId, numeroTrabajador])
  @@unique([companyId, rfc])
  @@unique([companyId, curp])
  @@map("worker_details")
}

model WorkerAddress {
  id                Int           @id @default(autoincrement())
  workerDetailsId   Int           @unique
  correoElectronico String
  telefonoCelular   String        @db.VarChar(10)
  codigoPostal      String
  pais              String
  entidadFederativa String
  municipioAlcaldia String
  colonia           String?
  calle             String?
  numeroExterior    String?
  numeroInterior    String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  workerDetails     WorkerDetails @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@map("worker_addresses")
}

model WorkerContractCondition {
  id                       Int                       @id @default(autoincrement())
  workerDetailsId          Int                       @unique
  sucursal                 String                    @default("MATRIZ")
  areaId                   Int?
  departmentId             Int?
  positionId               Int?
  regimenContratacion      RegimenContratacion
  zonaGeografica           ZonaGeografica
  tipoSalario              TipoSalario
  fechaIngreso             DateTime
  fechaAntiguedad          DateTime
  salarioDiario            Decimal                   @db.Decimal(10, 2)
  sueldoBaseCotizacion     Decimal                   @db.Decimal(10, 2)
  registroPatronal         String
  claseRiesgo              ClaseRiesgo
  tipoContrato             TipoContrato
  tipoTrabajador           TipoTrabajador
  situacionContractual     SituacionContractual
  duracionContrato         Int?
  calendarioNomina         String
  tipoJornada              TipoJornada
  horarioId                Int?
  modalidadTrabajo         ModalidadTrabajo
  observacion              String?
  presentaDeclaracionAnual Boolean                   @default(false)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  area                     OrganizationalArea?       @relation(fields: [areaId], references: [id])
  department               OrganizationalDepartment? @relation(fields: [departmentId], references: [id])
  schedule                 WorkSchedule?             @relation(fields: [horarioId], references: [id])
  position                 OrganizationalPosition?   @relation(fields: [positionId], references: [id])
  workerDetails            WorkerDetails             @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@map("worker_contract_conditions")
}

model WorkerPaymentData {
  id                    Int           @id @default(autoincrement())
  workerDetailsId       Int           @unique
  metodoPago            MetodoPago
  institucionFinanciera String?
  cuentaBancaria        String?
  cuentaClabe           String?       @db.VarChar(18)
  numeroTarjeta         String?       @db.VarChar(16)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  workerDetails         WorkerDetails @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@map("worker_payment_data")
}

model WorkerFamilyMember {
  id              Int                    @id @default(autoincrement())
  workerDetailsId Int
  nombreCompleto  String
  parentesco      Parentesco
  tipoDocumento   TipoDocumentoFamiliar?
  documentoUrl    String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  workerDetails   WorkerDetails          @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@index([workerDetailsId])
  @@map("worker_family_members")
}

model WorkerAlimony {
  id                    Int              @id @default(autoincrement())
  workerDetailsId       Int
  numeroJuicio          String
  tipoDescuento         TipoDescuento
  valor                 Decimal          @db.Decimal(10, 2)
  fechaInicio           DateTime
  nombreBeneficiario    String
  formaPago             FormaPagoPension
  institucionFinanciera String?
  cuentaBancaria        String?
  cuentaClabe           String?          @db.VarChar(18)
  numeroTarjeta         String?          @db.VarChar(16)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  workerDetails         WorkerDetails    @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@index([workerDetailsId])
  @@map("worker_alimony")
}

model WorkerInfonavitCredit {
  id              Int           @id @default(autoincrement())
  workerDetailsId Int
  numeroCredito   String
  tipoDescuento   TipoDescuento
  valor           Decimal       @db.Decimal(10, 2)
  fechaInicio     DateTime
  fechaTermino    DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  workerDetails   WorkerDetails @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@index([workerDetailsId])
  @@map("worker_infonavit_credits")
}

model WorkerFonacotCredit {
  id              Int           @id @default(autoincrement())
  workerDetailsId Int
  numeroCredito   String
  tipoDescuento   TipoDescuento
  valor           Decimal       @db.Decimal(10, 2)
  fechaInicio     DateTime
  fechaTermino    DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  workerDetails   WorkerDetails @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@index([workerDetailsId])
  @@map("worker_fonacot_credits")
}

model WorkerDocument {
  id                Int           @id @default(autoincrement())
  workerDetailsId   Int
  tipoDocumento     TipoDocumento
  nombreDocumento   String?
  documentoUrl      String
  fechaModificacion DateTime      @default(now())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  workerDetails     WorkerDetails @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@index([workerDetailsId])
  @@map("worker_documents")
}

model CompanyDocumentChecklist {
  id                        Int      @id @default(autoincrement())
  companyId                 Int      @unique
  constanciaSituacionFiscal Boolean  @default(false)
  altaPatronal              Boolean  @default(false)
  altaFonacot               Boolean  @default(false)
  sellosDigitales           Boolean  @default(false)
  catalogoTrabajadores      Boolean  @default(false)
  plantillaIncidencias      Boolean  @default(false)
  identificacion            Boolean  @default(false)
  cuentaBancaria            Boolean  @default(false)
  representanteLegal        Boolean  @default(false)
  actaConstitutiva          Boolean  @default(false)
  allDocumentsUploaded      Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  company                   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_document_checklist")
}

model CompanyDocument {
  id               Int          @id @default(autoincrement())
  companyId        Int
  documentType     DocumentType
  fileName         String
  filePath         String
  fileSize         Int
  mimeType         String
  uploadedBy       UserRole
  uploadedByUserId Int
  notes            String?
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  company          Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@map("company_documents")
}

enum UserRole {
  OPERATOR
  CLIENT
  EMPLOYEE
  ADMIN
  DEPARTMENT_HEAD
}

// ================================
// EMPRESAS
// ================================
model Company {
  id             Int           @id @default(autoincrement())
  name           String
  rfc            String        @unique
  legalName      String
  address        String
  email          String
  phone          String?
  status         CompanyStatus @default(IN_SETUP)
  employeesCount Int           @default(0)

  // Relaciones
  calendars               Calendar[]
  documentChecklist       CompanyDocumentChecklist?
  companyDocuments        CompanyDocument[]
  employees               Employee[]
  incidences              Incidence[]
  invitationTokens        InvitationToken[]
  notifications           Notification[]
  workSchedules           WorkSchedule[]
  organizationalPositions OrganizationalPosition[]
  payrolls                Payroll[]
  users                   User[]
  wizardProgress          WizardProgress?
  workerDetails           WorkerDetails[]

  // Wizard y configuraciÃ³n
  wizard CompanyWizard?

  // SecciÃ³n 1: Datos Generales
  generalInfo         CompanyGeneralInfo?
  companyAddress      CompanyAddress?
  legalRepresentative CompanyLegalRepresentative?
  notarialPower       CompanyNotarialPower?

  // SecciÃ³n 2: Obligaciones Patronales
  imssRegistroPatronal IMSSRegistroPatronal?
  fonacot              Fonacot?

  // SecciÃ³n 3: Bancos
  bank CompanyBank?

  // SecciÃ³n 4: Sellos Digitales
  digitalCertificate CompanyDigitalCertificate?

  // SecciÃ³n 5: Estructura Organizacional
  areas                     Area[]
  departamentos             Departamento[]
  puestos                   Puesto[]
  organizationalAreas       OrganizationalArea[]
  organizationalDepartments OrganizationalDepartment[]
  vinculacionesJefe         VinculacionJefe[]

  // SecciÃ³n 6: Prestaciones
  benefits      CompanyBenefit[]
  benefitGroups CompanyBenefitGroup[]

  // SecciÃ³n 7: NÃ³mina (usa el modelo Calendar existente)

  // SecciÃ³n 8: Talento Humano
  schedules CompanySchedule[]
  policies  CompanyPolicy[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ãndices
  @@index([status])
  @@map("companies")
}

enum CompanyStatus {
  IN_SETUP
  CONFIGURED
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}

enum ContractType {
  INDEFINITE
  FIXED_TERM
  PART_TIME
  CONTRACTOR
  INTERN
}

enum PayrollStatus {
  DRAFT
  CALCULATED
  PENDING_AUTHORIZATION
  AUTHORIZED
  PROCESSED
  TIMBERED
  ERROR
}

enum CFDIStatus {
  PENDING
  PROCESSING
  COMPLETED
  ERROR
}

enum IncidenceType {
  FALTAS
  PERMISOS
  VACACIONES
  TIEMPO_EXTRA
  BONOS
}

enum IncidenceStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
}

enum NotificationType {
  PAYROLL_PENDING_AUTHORIZATION
  PAYROLL_APPROVED
  PAYROLL_REJECTED
  PAYROLL_TIMBERED
  SYSTEM_ALERT
  REMINDER
  CHECKLIST_COMPLETED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// ================================
// WIZARD DE CONFIGURACIÃN DE EMPRESAS
// ================================
model CompanyWizard {
  id        Int     @id @default(autoincrement())
  companyId Int     @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Estado general del wizard
  status         WizardStatus @default(IN_PROGRESS)
  currentSection Int          @default(1)
  currentStep    Int          @default(1)

  // Datos del wizard (JSON para flexibilidad)
  wizardData Json @default("{}")

  // Progreso por secciones
  sectionProgress CompanyWizardSection[]

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  @@map("company_wizards")
}

model CompanyWizardSection {
  id       Int           @id @default(autoincrement())
  wizardId Int
  wizard   CompanyWizard @relation(fields: [wizardId], references: [id], onDelete: Cascade)

  // IdentificaciÃ³n de la secciÃ³n
  sectionNumber Int // 1-8
  sectionName   String // "Datos Generales", "Obligaciones Patronales", etc.

  // Estado de la secciÃ³n
  status     SectionStatus @default(PENDING)
  isOptional Boolean       @default(false)

  // Pasos de la secciÃ³n
  steps CompanyWizardStep[]

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  @@unique([wizardId, sectionNumber])
  @@map("company_wizard_sections")
}

model CompanyWizardStep {
  id        Int                  @id @default(autoincrement())
  sectionId Int
  section   CompanyWizardSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  // IdentificaciÃ³n del paso
  stepNumber Int // 1-n
  stepName   String // "InformaciÃ³n General", "Domicilio", etc.

  // Estado del paso
  status     StepStatus @default(PENDING)
  isOptional Boolean    @default(false)

  // Datos del paso (JSON)
  stepData Json @default("{}")

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  @@unique([sectionId, stepNumber])
  @@map("company_wizard_steps")
}

// ================================
// MODELOS DEL WIZARD - SECCIÃN 1: DATOS GENERALES
// ================================

// Paso 1: InformaciÃ³n General
model CompanyGeneralInfo {
  id        Int     @id @default(autoincrement())
  companyId Int     @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  businessName       String    @db.VarChar(100)
  commercialName     String?
  rfc                String
  tipoPersona        String? // FISICA o MORAL
  actividadEconomica String?
  taxRegime          String
  startDate          DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("company_general_info")
}

// Paso 2: Domicilio
model CompanyAddress {
  id        Int     @id @default(autoincrement())
  companyId Int     @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  tipoDomicilio  String  @default("matriz")
  nombreSucursal String
  street         String
  exteriorNumber String
  interiorNumber String?
  neighborhood   String
  city           String
  state          String
  zipCode        String
  municipio      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("company_address")
}

// Paso 3: Representante Legal
model CompanyLegalRepresentative {
  id        Int     @id @default(autoincrement())
  companyId Int     @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  name                 String
  primerApellido       String?
  segundoApellido      String?
  tipoIdentificacionId Int?
  tipoIdentificacion   IdentificationType? @relation(fields: [tipoIdentificacionId], references: [id])
  uriIdentificacion    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("company_legal_representative")
}

// Paso 4: Poder Notarial
model CompanyNotarialPower {
  id        Int     @id @default(autoincrement())
  companyId Int     @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  folioPoderNotarial String?    @db.VarChar(25)
  fechaEmision       DateTime?
  fechaVigencia      DateTime?
  nombreFederatario  String?
  numeroFederatario  Int?
  estadoId           Int?
  estado             State?     @relation(fields: [estadoId], references: [id])
  municipioId        Int?
  municipio          Municipio? @relation(fields: [municipioId], references: [id])
  uriPoderNotarial   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("company_notarial_power")
}

// ================================
// MODELOS DEL WIZARD - SECCIÃN 2: OBLIGACIONES PATRONALES
// ================================

// Paso 1: IMSS Registro Patronal
model IMSSRegistroPatronal {
  id        Int     @id @default(autoincrement())
  companyId Int     @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Campos IMSS
  nomDomicilio        String?          @map("nomDomicilio")
  actividadEconomica  String?          @map("actividadEconomica")
  clvRegistroPatronal String?          @map("clvRegistroPatronal")
  claseRiesgoId       Int?             @map("claseRiesgoId")
  claseRiesgo         ClaseRiesgoIMSS? @relation(fields: [claseRiesgoId], references: [id])
  numFraccion         Int?             @map("numFraccion")
  numPrismaRiesgo     Decimal?         @map("numPrismaRiesgo") @db.Decimal(5, 2)
  fechaVigencia       DateTime?        @map("fechaVigencia")
  uriRegistroPatronal String?          @map("uriRegistroPatronal")

  // RelaciÃ³n con domicilio IMSS
  imssDomicilio IMSSDomicilio?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("imss_registro_patronal")
}

// Modelo para otros datos de obligaciones fiscales (IMSS Domicilio, FONACOT, etc.)
model Fonacot {
  id        Int     @id @default(autoincrement())
  companyId Int     @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Registro Patronal FONACOT
  registroPatronal  String?   @db.VarChar(7)
  fechaAfiliacion   DateTime?
  uriArchivoFonacot String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fonacot")
}

// ================================
// MODELOS DEL WIZARD - SECCIÃN 3: BANCOS
// ================================

// CatÃ¡logo de Bancos
model Bank {
  id                 Int      @id @default(autoincrement())
  codigo             String   @unique @db.VarChar(10)
  nombre             String   @db.VarChar(200)
  nombreCorto        String?  @db.VarChar(50)
  activo             Boolean  @default(true)
  fechaCreacion      DateTime @default(now())
  fechaActualizacion DateTime @updatedAt

  // Relaciones
  companyBanks CompanyBank[]

  @@map("cat_banks")
}

// Paso 1: Cuentas Bancarias
model CompanyBank {
  id        Int     @id @default(autoincrement())
  companyId Int     @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // RelaciÃ³n con el catÃ¡logo de bancos
  bankId Int
  bank   Bank @relation(fields: [bankId], references: [id])

  // Campos nuevos
  nomCuentaBancaria          String // 1. Nombre de la cuenta bancaria
  numCuentaBancaria          String // 3. NÃºmero de cuenta bancaria
  numClabeInterbancaria      String   @db.VarChar(18) // 4. CLABE interbancaria (18 dÃ­gitos)
  numSucursal                String?  @db.VarChar(6) // 5. NÃºmero de sucursal (3-6 dÃ­gitos)
  clvDispersion              Int? // 6. Clave de dispersiÃ³n
  desCuentaBancaria          String? // 7. DescripciÃ³n de la cuenta (opcional)
  opcCuentaBancariaPrincipal Boolean? @default(false) // 8. Cuenta principal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("company_banks")
}

// ================================
// MODELOS DEL WIZARD - SECCIÃN 4: SELLOS DIGITALES
// ================================

// Paso 1: Certificados SAT
model CompanyDigitalCertificate {
  id        Int     @id @default(autoincrement())
  companyId Int     @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  certificateFile String
  keyFile         String
  password        String?
  validFrom       DateTime?
  validUntil      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("company_digital_certificates")
}

// ================================
// MODELOS DEL WIZARD - SECCIÃN 5: ESTRUCTURA ORGANIZACIONAL
// ================================

// Paso 1: Ãreas
model Area {
  id        Int     @id @default(autoincrement())
  empresaId Int
  empresa   Company @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  nombre      String
  descripcion String?
  activo      Boolean @default(true)

  // Relaciones
  departamentos Departamento[]
  puestos       Puesto[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([empresaId, nombre])
  @@map("areas")
}

// Paso 2: Departamentos
model Departamento {
  id        Int     @id @default(autoincrement())
  empresaId Int
  empresa   Company @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  areaId Int?
  area   Area? @relation(fields: [areaId], references: [id])

  nombre      String
  descripcion String?
  activo      Boolean @default(true)

  // Relaciones
  puestos Puesto[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([empresaId, nombre])
  @@map("departamentos")
}

// Paso 3: Puestos (REQUERIDO)
model Puesto {
  id        Int     @id @default(autoincrement())
  empresaId Int
  empresa   Company @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  // Relaciones opcionales para permitir flexibilidad
  areaId Int?
  area   Area? @relation(fields: [areaId], references: [id])

  departamentoId Int?
  departamento   Departamento? @relation(fields: [departamentoId], references: [id])

  nombre String
  activo Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([empresaId, nombre])
  @@map("puestos")
}

// ================================
// MODELOS DEL WIZARD - SECCIÃN 6: PRESTACIONES
// ================================

// Paso 1: Prestaciones
model CompanyBenefit {
  id        Int     @id @default(autoincrement())
  companyId Int
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  name        String
  type        BenefitType
  isLegal     Boolean     @default(false) // PrestaciÃ³n de ley
  percentage  Decimal?    @db.Decimal(5, 2)
  amount      Decimal?    @db.Decimal(10, 2)
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("company_benefits")
}

// Paso 2: Grupos de Prestaciones
model CompanyBenefitGroup {
  id        Int     @id @default(autoincrement())
  companyId Int
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  name        String
  description String?
  benefits    Json // Array de IDs de beneficios

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("company_benefit_groups")
}

// ================================
// MODELOS DEL WIZARD - SECCIÃN 7: NÃMINA
// ================================
// Usa el modelo Calendar existente para Calendario Laboral
// La configuraciÃ³n de nÃ³mina se maneja en el modelo Company

// ================================
// MODELOS DEL WIZARD - SECCIÃN 8: TALENTO HUMANO
// ================================

// Paso 1: Horarios
model CompanySchedule {
  id        Int     @id @default(autoincrement())
  companyId Int
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  name      String
  startTime String // "08:00"
  endTime   String // "17:00"
  breakTime Int? // minutos
  workDays  Json // [1,2,3,4,5] = lunes a viernes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("company_schedules")
}

// Paso 2: PolÃ­ticas
model CompanyPolicy {
  id        Int     @id @default(autoincrement())
  companyId Int
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  name        String
  type        PolicyType
  description String?
  content     String     @db.Text
  isActive    Boolean    @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("company_policies")
}

// Enums para el wizard
enum WizardStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum SectionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum BankType {
  CHECKING
  SAVINGS
  PAYROLL
}

enum BenefitType {
  PERCENTAGE
  FIXED_AMOUNT
  DAYS
  HOURS
}

enum PolicyType {
  ATTENDANCE
  VACATION
  REMOTE_WORK
  CODE_OF_CONDUCT
  OTHER
}

enum SexoTrabajador {
  MASCULINO
  FEMENINO
}

enum NacionalidadTrabajador {
  MEXICANA
  EXTRANJERA
}

enum EstadoCivilTrabajador {
  SOLTERO
  CASADO
  DIVORCIADO
  VIUDO
  UNION_LIBRE
}

enum RegimenContratacion {
  ASIMILADOS_ACCIONES
  ASIMILADOS_COMISIONISTAS
  ASIMILADOS_HONORARIOS
  ASIMILADOS_INTEGRANTES_SOCIEDADES
  ASIMILADOS_MIEMBROS_CONSEJOS
  ASIMILADOS_MIEMBROS_COOPERATIVAS
  ASIMILADOS_OTROS
  JUBILADOS
  SUELDOS
}

enum ZonaGeografica {
  RESTO_PAIS
  ZONA_FRONTERA_NORTE
}

enum TipoSalario {
  FIJO
  MIXTO
  VARIABLE
}

enum ClaseRiesgo {
  CLASE_I
  CLASE_II
  CLASE_III
  CLASE_IV
  CLASE_V
}

enum TipoContrato {
  PERIODO_PRUEBA
  CAPACITACION_INICIAL
  OBRA_TIEMPO_DETERMINADO
  TEMPORADA
  TIEMPO_INDETERMINADO
  PRACTICAS_PROFESIONALES
  TELETRABAJO
}

enum TipoTrabajador {
  CONFIANZA
  PRACTICANTE
}

enum SituacionContractual {
  EVENTUAL
  EVENTUAL_CONSTRUCCION
  EVENTUAL_CAMPO
  PERMANENTE
}

enum TipoJornada {
  DIURNA
  MIXTA
  NOCTURNA
}

enum ModalidadTrabajo {
  MIXTO
  PRESENCIAL
  TELETRABAJO
}

enum MetodoPago {
  TRANSFERENCIA
  CHEQUE_NOMINATIVO
  EFECTIVO
}

enum Parentesco {
  CONCUBINA
  CONCUBINO
  ESPOSA
  ESPOSO
  HIJA
  HIJO
  MADRE
  PADRE
}

enum TipoDocumentoFamiliar {
  ACTA_NACIMIENTO
  ACTA_MATRIMONIO
  INE
}

enum TipoDescuento {
  CUOTA_FIJA
  PORCENTAJE
  FACTOR_DESCUENTO
}

enum FormaPagoPension {
  CHEQUE
  TRANSFERENCIA
}

enum TipoDocumento {
  AVISO_RETENCION_INFONAVIT
  AVISO_SUSPENSION_INFONAVIT
  CARTA_RECOMENDACION
  CURP
  COMPROBANTE_DOMICILIO
  COMPROBANTE_ESTUDIOS
  RFC
  CURRICULUM_VITAE
  IDENTIFICACION_OFICIAL
  NSS
  OFICIO_RETENCION_PENSION
  SOLICITUD_EMPLEO
  TARJETA_RESIDENCIA
  OTRO
}

enum DocumentType {
  CONSTANCIA_SITUACION_FISCAL
  ALTA_PATRONAL
  ALTA_FONACOT
  SELLOS_DIGITALES
  CATALOGO_TRABAJADORES
  PLANTILLA_INCIDENCIAS
  IDENTIFICACION
  CUENTA_BANCARIA
  REPRESENTANTE_LEGAL
  ACTA_CONSTITUTIVA
}
// ================================
// VINCULACIÃN DE JEFES
// ================================

model VinculacionJefe {
  id         Int      @id @default(autoincrement())
  empresaId  Int
  usuarioId  Int
  empleadoId Int      @unique
  activo     Boolean  @default(true)
  creadoEn   DateTime @default(now())
  actualizadoEn DateTime @updatedAt

  // Relaciones
  empresa  Company  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  usuario  User     @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  empleado Employee @relation(fields: [empleadoId], references: [id], onDelete: Cascade)

  // Relaciones con Ã¡reas, departamentos, puestos y empleados
  areas        VinculacionJefeArea[]
  departamentos VinculacionJefeDepartamento[]
  puestos      VinculacionJefePuesto[]
  empleadosACargo VinculacionJefeEmpleado[]

  @@index([empresaId])
  @@index([usuarioId])
  @@map("vinculacion_jefes")
}

model VinculacionJefeArea {
  id               Int             @id @default(autoincrement())
  vinculacionJefeId Int
  areaId           Int
  creadoEn         DateTime        @default(now())

  // Relaciones
  vinculacionJefe VinculacionJefe     @relation(fields: [vinculacionJefeId], references: [id], onDelete: Cascade)
  area            OrganizationalArea  @relation(fields: [areaId], references: [id], onDelete: Cascade)

  @@unique([vinculacionJefeId, areaId])
  @@map("vinculacion_jefe_areas")
}

model VinculacionJefeDepartamento {
  id               Int             @id @default(autoincrement())
  vinculacionJefeId Int
  departamentoId   Int
  creadoEn         DateTime        @default(now())

  // Relaciones
  vinculacionJefe VinculacionJefe           @relation(fields: [vinculacionJefeId], references: [id], onDelete: Cascade)
  departamento    OrganizationalDepartment  @relation(fields: [departamentoId], references: [id], onDelete: Cascade)

  @@unique([vinculacionJefeId, departamentoId])
  @@map("vinculacion_jefe_departamentos")
}

model VinculacionJefePuesto {
  id               Int             @id @default(autoincrement())
  vinculacionJefeId Int
  puestoId         Int
  creadoEn         DateTime        @default(now())

  // Relaciones
  vinculacionJefe VinculacionJefe         @relation(fields: [vinculacionJefeId], references: [id], onDelete: Cascade)
  puesto          OrganizationalPosition  @relation(fields: [puestoId], references: [id], onDelete: Cascade)

  @@unique([vinculacionJefeId, puestoId])
  @@map("vinculacion_jefe_puestos")
}

model VinculacionJefeEmpleado {
  id               Int             @id @default(autoincrement())
  vinculacionJefeId Int
  empleadoId       Int
  activo           Boolean         @default(true)
  creadoEn         DateTime        @default(now())
  actualizadoEn    DateTime        @updatedAt

  // Relaciones
  vinculacionJefe VinculacionJefe @relation(fields: [vinculacionJefeId], references: [id], onDelete: Cascade)
  empleado        Employee        @relation(fields: [empleadoId], references: [id], onDelete: Cascade)

  @@unique([vinculacionJefeId, empleadoId])
  @@index([empleadoId])
  @@map("vinculacion_jefe_empleados")
}