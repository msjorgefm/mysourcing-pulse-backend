// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// USUARIOS Y AUTENTICACIÓN
// ================================
model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  name        String
  role        UserRole
  isActive    Boolean  @default(true)
  
  // Relación con empresa (para clientes)
  companyId   Int?
  company     Company? @relation(fields: [companyId], references: [id])
  
  // Relación con empleado (para trabajadores)
  employeeId  Int?     @unique
  employee    Employee? @relation(fields: [employeeId], references: [id])
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Sesiones y tokens
  refreshTokens RefreshToken[]
  
  // Índices
  @@index([email, isActive])
  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("refresh_tokens")
}

enum UserRole {
  OPERATOR
  CLIENT
  EMPLOYEE
  ADMIN
}

// ================================
// EMPRESAS
// ================================
model Company {
  id            Int      @id @default(autoincrement())
  name          String
  rfc           String   @unique
  legalName     String
  address       String
  email         String
  phone         String?
  status        CompanyStatus @default(IN_SETUP)
  employeesCount Int     @default(0)
  
  // Configuración de nómina
  paymentMethod String?
  bankAccount   String?
  taxRegime     String?
  
  // Configuración del SAT
  certificateFile String?
  keyFile         String?
  certificatePassword String?
  
  // Relaciones
  users         User[]
  employees     Employee[]
  payrolls      Payroll[]
  incidences    Incidence[]
  notifications Notification[]
  calendars     Calendar[]
  
  // Wizard y configuración
  wizard        CompanyWizard?
  generalInfo   CompanyGeneralInfo?
  taxObligations CompanyTaxObligations?
  banks         CompanyBank[]
  digitalCertificate CompanyDigitalCertificate?
  areas         CompanyArea[]
  departments   CompanyDepartment[]
  positions     CompanyPosition[]
  benefits      CompanyBenefit[]
  benefitGroups CompanyBenefitGroup[]
  schedules     CompanySchedule[]
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Índices
  @@index([status])
  @@map("companies")
}

enum CompanyStatus {
  IN_SETUP
  CONFIGURED
  ACTIVE
  SUSPENDED
  INACTIVE
}

// ================================
// EMPLEADOS
// ================================
model Employee {
  id              Int      @id @default(autoincrement())
  employeeNumber  String   @unique
  name            String
  email           String?
  rfc             String   @unique
  position        String
  department      String
  status          EmployeeStatus @default(ACTIVE)
  
  // Información de contrato
  hireDate        DateTime
  contractType    ContractType
  workSchedule    String?
  baseSalary      Decimal  @db.Decimal(10, 2)
  
  // Información personal
  dateOfBirth     DateTime?
  address         String?
  phone           String?
  emergencyContact String?
  
  // Información bancaria
  bankName        String?
  bankAccount     String?
  clabe           String?
  
  // Información del SAT
  taxRegime       String?
  
  // Relaciones
  companyId       Int
  company         Company @relation(fields: [companyId], references: [id])
  
  user            User?
  payrollItems    PayrollItem[]
  incidences      Incidence[]
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Índices - CORREGIDOS: están dentro del modelo
  @@index([companyId, status])
  @@map("employees")
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}

enum ContractType {
  INDEFINITE
  FIXED_TERM
  PART_TIME
  CONTRACTOR
  INTERN
}

// ================================
// CALENDARIO LABORAL
// ================================
model Calendar {
  id          Int      @id @default(autoincrement())
  name        String
  year        Int
  
  // Días de trabajo por semana
  workDays    Json     // [1,2,3,4,5] = lunes a viernes
  
  // Días festivos
  holidays    Json     // [{date: "2024-01-01", name: "Año Nuevo"}]
  
  // Configuración
  isDefault   Boolean  @default(false)
  
  // Relaciones
  companyId   Int
  company     Company  @relation(fields: [companyId], references: [id])
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([companyId, year])
  @@map("calendars")
}

// ================================
// NÓMINAS
// ================================
model Payroll {
  id            Int      @id @default(autoincrement())
  period        String   // "2024-01" formato año-mes
  periodStart   DateTime
  periodEnd     DateTime
  status        PayrollStatus @default(DRAFT)
  
  // Totales
  totalGross    Decimal  @db.Decimal(12, 2)
  totalDeductions Decimal @db.Decimal(12, 2)
  totalNet      Decimal  @db.Decimal(12, 2)
  
  // Metadata
  employeeCount Int
  processedAt   DateTime?
  authorizedAt  DateTime?
  authorizedBy  String?
  
  // XML y PDF paths
  xmlPath       String?
  pdfPath       String?
  
  // Relaciones
  companyId     Int
  company       Company @relation(fields: [companyId], references: [id])
  
  payrollItems  PayrollItem[]
  incidences    Incidence[]
  notifications Notification[]
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Índices - CORREGIDOS: están dentro del modelo
  @@index([companyId, status])
  @@index([periodStart, periodEnd])
  @@map("payrolls")
}

enum PayrollStatus {
  DRAFT
  CALCULATED
  PENDING_AUTHORIZATION
  AUTHORIZED
  PROCESSED
  TIMBERED
  ERROR
}

// ================================
// PARTIDAS DE NÓMINA
// ================================
model PayrollItem {
  id            Int      @id @default(autoincrement())
  
  // Percepciones
  baseSalary    Decimal  @db.Decimal(10, 2)
  overtime      Decimal  @db.Decimal(10, 2) @default(0)
  bonuses       Decimal  @db.Decimal(10, 2) @default(0)
  totalGross    Decimal  @db.Decimal(10, 2)
  
  // Deducciones
  incomeTax     Decimal  @db.Decimal(10, 2) @default(0)
  socialSecurity Decimal @db.Decimal(10, 2) @default(0)
  otherDeductions Decimal @db.Decimal(10, 2) @default(0)
  totalDeductions Decimal @db.Decimal(10, 2)
  
  // Total neto
  netSalary     Decimal  @db.Decimal(10, 2)
  
  // Días trabajados
  workedDays    Int
  
  // Status del CFDI
  cfdiStatus    CFDIStatus @default(PENDING)
  cfdiUuid      String?
  cfdiXmlPath   String?
  cfdiPdfPath   String?
  
  // Relaciones
  employeeId    Int
  employee      Employee @relation(fields: [employeeId], references: [id])
  
  payrollId     Int
  payroll       Payroll @relation(fields: [payrollId], references: [id])
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([employeeId, payrollId])
  @@map("payroll_items")
}

enum CFDIStatus {
  PENDING
  PROCESSING
  COMPLETED
  ERROR
}

// ================================
// INCIDENCIAS
// ================================
model Incidence {
  id          Int            @id @default(autoincrement())
  type        IncidenceType
  date        DateTime
  quantity    Decimal        @db.Decimal(8, 2) // horas, días, etc.
  amount      Decimal?       @db.Decimal(10, 2) // monto en pesos
  description String?
  status      IncidenceStatus @default(PENDING)
  
  // Relaciones
  employeeId  Int
  employee    Employee       @relation(fields: [employeeId], references: [id])
  
  companyId   Int
  company     Company        @relation(fields: [companyId], references: [id])
  
  payrollId   Int?
  payroll     Payroll?       @relation(fields: [payrollId], references: [id])
  
  // Timestamps
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Índices - CORREGIDOS: están dentro del modelo
  @@index([companyId, date])
  @@index([employeeId, type])
  @@map("incidences")
}

enum IncidenceType {
  FALTAS        // faltas
  PERMISOS      // permisos
  VACACIONES    // vacaciones
  TIEMPO_EXTRA  // tiempo_extra
  BONOS         // bonos
}

enum IncidenceStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
}

// ================================
// NOTIFICACIONES
// ================================
model Notification {
  id        Int              @id @default(autoincrement())
  type      NotificationType
  title     String
  message   String
  priority  NotificationPriority @default(NORMAL)
  read      Boolean          @default(false)
  
  // Metadata adicional (JSON)
  metadata  Json?
  
  // Relaciones
  companyId Int?
  company   Company?         @relation(fields: [companyId], references: [id])
  
  payrollId Int?
  payroll   Payroll?         @relation(fields: [payrollId], references: [id])
  
  // Timestamps
  createdAt DateTime         @default(now())
  readAt    DateTime?
  
  // Índices - CORREGIDOS: están dentro del modelo
  @@index([companyId, read])
  @@map("notifications")
}

enum NotificationType {
  PAYROLL_PENDING_AUTHORIZATION
  PAYROLL_APPROVED
  PAYROLL_REJECTED
  PAYROLL_TIMBERED
  SYSTEM_ALERT
  REMINDER
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// ================================
// WIZARD DE CONFIGURACIÓN DE EMPRESAS
// ================================
model CompanyWizard {
  id                Int                 @id @default(autoincrement())
  companyId         Int                 @unique
  company           Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // Estado general del wizard
  status            WizardStatus        @default(IN_PROGRESS)
  currentSection    Int                 @default(1)
  currentStep       Int                 @default(1)
  
  // Datos del wizard (JSON para flexibilidad)
  wizardData        Json                @default("{}")
  
  // Progreso por secciones
  sectionProgress   CompanyWizardSection[]
  
  // Timestamps
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  completedAt       DateTime?
  
  @@map("company_wizards")
}

model CompanyWizardSection {
  id              Int                 @id @default(autoincrement())
  wizardId        Int
  wizard          CompanyWizard       @relation(fields: [wizardId], references: [id], onDelete: Cascade)
  
  // Identificación de la sección
  sectionNumber   Int                 // 1-8
  sectionName     String              // "Datos Generales", "Obligaciones Patronales", etc.
  
  // Estado de la sección
  status          SectionStatus       @default(PENDING)
  isOptional      Boolean             @default(false)
  
  // Pasos de la sección
  steps           CompanyWizardStep[]
  
  // Timestamps
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  completedAt     DateTime?
  
  @@unique([wizardId, sectionNumber])
  @@map("company_wizard_sections")
}

model CompanyWizardStep {
  id              Int                 @id @default(autoincrement())
  sectionId       Int
  section         CompanyWizardSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  // Identificación del paso
  stepNumber      Int                 // 1-n
  stepName        String              // "Información General", "Domicilio", etc.
  
  // Estado del paso
  status          StepStatus          @default(PENDING)
  isOptional      Boolean             @default(false)
  
  // Datos del paso (JSON)
  stepData        Json                @default("{}")
  
  // Timestamps
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  completedAt     DateTime?
  
  @@unique([sectionId, stepNumber])
  @@map("company_wizard_steps")
}

// Nuevas tablas para almacenar datos específicos del wizard
model CompanyGeneralInfo {
  id              Int      @id @default(autoincrement())
  companyId       Int      @unique
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // Información general
  businessName    String
  commercialName  String?
  rfc             String
  taxRegime       String
  startDate       DateTime
  
  // Domicilio
  street          String
  exteriorNumber  String
  interiorNumber  String?
  neighborhood    String
  city            String
  state           String
  zipCode         String
  country         String   @default("México")
  
  // Representante legal
  legalRepName    String
  legalRepRFC     String
  legalRepCurp    String?
  legalRepPosition String
  
  // Poder notarial
  notarialPower   String?
  notaryNumber    String?
  notaryName      String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("company_general_info")
}

model CompanyTaxObligations {
  id                    Int      @id @default(autoincrement())
  companyId             Int      @unique
  company               Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // IMSS Registro patronal
  imssRegistration      String?
  imssClassification    String?
  imssRiskClass         String?
  
  // IMSS Domicilio
  imssAddress           String?
  imssCity              String?
  imssState             String?
  imssZipCode           String?
  
  // FONACOT
  fonacotRegistration   String?
  fonacotCenter         String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("company_tax_obligations")
}

model CompanyBank {
  id              Int      @id @default(autoincrement())
  companyId       Int
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  bankName        String
  bankType        BankType
  accountNumber   String
  clabe           String?
  isPrimary       Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("company_banks")
}

model CompanyDigitalCertificate {
  id              Int      @id @default(autoincrement())
  companyId       Int      @unique
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  certificateFile String
  keyFile         String
  password        String
  validFrom       DateTime
  validUntil      DateTime
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("company_digital_certificates")
}

model CompanyArea {
  id              Int                 @id @default(autoincrement())
  companyId       Int
  company         Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  name            String
  description     String?
  isActive        Boolean             @default(true)
  
  // Relaciones
  departments     CompanyDepartment[]
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@map("company_areas")
}

model CompanyDepartment {
  id              Int                 @id @default(autoincrement())
  companyId       Int
  company         Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  areaId          Int?
  area            CompanyArea?        @relation(fields: [areaId], references: [id])
  
  name            String
  description     String?
  isActive        Boolean             @default(true)
  
  // Relaciones
  positions       CompanyPosition[]
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@map("company_departments")
}

model CompanyPosition {
  id              Int                 @id @default(autoincrement())
  companyId       Int
  company         Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  departmentId    Int
  department      CompanyDepartment   @relation(fields: [departmentId], references: [id])
  
  name            String
  description     String?
  minSalary       Decimal?            @db.Decimal(10, 2)
  maxSalary       Decimal?            @db.Decimal(10, 2)
  isActive        Boolean             @default(true)
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@map("company_positions")
}

model CompanyBenefit {
  id              Int      @id @default(autoincrement())
  companyId       Int
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  name            String
  type            BenefitType
  isLegal         Boolean  @default(false) // Prestación de ley
  percentage      Decimal? @db.Decimal(5, 2)
  amount          Decimal? @db.Decimal(10, 2)
  description     String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("company_benefits")
}

model CompanyBenefitGroup {
  id              Int      @id @default(autoincrement())
  companyId       Int
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  name            String
  description     String?
  benefits        Json     // Array de IDs de beneficios
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("company_benefit_groups")
}

model CompanySchedule {
  id              Int      @id @default(autoincrement())
  companyId       Int
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  name            String
  startTime       String   // "08:00"
  endTime         String   // "17:00"
  breakTime       Int?     // minutos
  workDays        Json     // [1,2,3,4,5] = lunes a viernes
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("company_schedules")
}

// Enums para el wizard
enum WizardStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum SectionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum BankType {
  CHECKING
  SAVINGS
  PAYROLL
}

enum BenefitType {
  PERCENTAGE
  FIXED_AMOUNT
  DAYS
  HOURS
}