generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String
  role          UserRole
  isActive      Boolean        @default(true)
  companyId     Int?
  employeeId    Int?           @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lastLoginAt   DateTime?
  firstName     String?
  lastName      String?
  phone         String?
  photoUrl      String?
  refreshTokens RefreshToken[]
  company       Company?       @relation(fields: [companyId], references: [id])
  employee      Employee?      @relation(fields: [employeeId], references: [id])

  @@index([email, isActive])
  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model InvitationToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  email     String
  companyId Int
  used      Boolean   @default(false)
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  metadata  Json?
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([token, used])
  @@map("invitation_tokens")
}

model Company {
  id                  Int                         @id @default(autoincrement())
  name                String
  rfc                 String                      @unique
  legalName           String
  address             String
  email               String
  phone               String?
  status              CompanyStatus               @default(IN_SETUP)
  employeesCount      Int                         @default(0)
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  calendars           Calendar[]
  companyAddress      CompanyAddress?
  areas               CompanyArea[]
  banks               CompanyBank[]
  benefitGroups       CompanyBenefitGroup[]
  benefits            CompanyBenefit[]
  departments         CompanyDepartment[]
  digitalCertificate  CompanyDigitalCertificate?
  generalInfo         CompanyGeneralInfo?
  legalRepresentative CompanyLegalRepresentative?
  notarialPower       CompanyNotarialPower?
  policies            CompanyPolicy[]
  positions           CompanyPosition[]
  schedules           CompanySchedule[]
  imssRegistroPatronal IMSSRegistroPatronal?
  fonacot             Fonacot?
  wizard              CompanyWizard?
  employees           Employee[]
  incidences          Incidence[]
  invitationTokens    InvitationToken[]
  notifications       Notification[]
  payrolls            Payroll[]
  users               User[]
  
  // Nuevas relaciones para el wizard y configuración de empresa
  wizardProgress      WizardProgress?
  organizationalAreas OrganizationalArea[]
  organizationalDepartments OrganizationalDepartment[]
  organizationalPositions OrganizationalPosition[]
  workSchedules       WorkSchedule[]
  documentChecklist   CompanyDocumentChecklist?
  companyDocuments    CompanyDocument[]
  workerDetails       WorkerDetails[]

  @@index([status])
  @@map("companies")
}

model Employee {
  id               Int            @id @default(autoincrement())
  employeeNumber   String         @unique
  name             String
  email            String?
  rfc              String         @unique
  position         String
  department       String
  status           EmployeeStatus @default(ACTIVE)
  hireDate         DateTime
  contractType     ContractType
  workSchedule     String?
  baseSalary       Decimal        @db.Decimal(10, 2)
  dateOfBirth      DateTime?
  address          String?
  phone            String?
  emergencyContact String?
  bankName         String?
  bankAccount      String?
  clabe            String?
  taxRegime        String?
  companyId        Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  company          Company        @relation(fields: [companyId], references: [id])
  incidences       Incidence[]
  payrollItems     PayrollItem[]
  user             User?
  
  // Nueva relación para detalles de trabajador
  workerDetails    WorkerDetails?

  @@index([companyId, status])
  @@map("employees")
}

model Calendar {
  id        Int      @id @default(autoincrement())
  name      String
  year      Int
  workDays  Json
  holidays  Json
  isDefault Boolean  @default(false)
  companyId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, year])
  @@map("calendars")
}

model Payroll {
  id              Int            @id @default(autoincrement())
  period          String
  periodStart     DateTime
  periodEnd       DateTime
  status          PayrollStatus  @default(DRAFT)
  totalGross      Decimal        @db.Decimal(12, 2)
  totalDeductions Decimal        @db.Decimal(12, 2)
  totalNet        Decimal        @db.Decimal(12, 2)
  employeeCount   Int
  processedAt     DateTime?
  authorizedAt    DateTime?
  authorizedBy    String?
  xmlPath         String?
  pdfPath         String?
  companyId       Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  incidences      Incidence[]
  notifications   Notification[]
  payrollItems    PayrollItem[]
  company         Company        @relation(fields: [companyId], references: [id])

  @@index([companyId, status])
  @@index([periodStart, periodEnd])
  @@map("payrolls")
}

model PayrollItem {
  id              Int        @id @default(autoincrement())
  baseSalary      Decimal    @db.Decimal(10, 2)
  overtime        Decimal    @default(0) @db.Decimal(10, 2)
  bonuses         Decimal    @default(0) @db.Decimal(10, 2)
  totalGross      Decimal    @db.Decimal(10, 2)
  incomeTax       Decimal    @default(0) @db.Decimal(10, 2)
  socialSecurity  Decimal    @default(0) @db.Decimal(10, 2)
  otherDeductions Decimal    @default(0) @db.Decimal(10, 2)
  totalDeductions Decimal    @db.Decimal(10, 2)
  netSalary       Decimal    @db.Decimal(10, 2)
  workedDays      Int
  cfdiStatus      CFDIStatus @default(PENDING)
  cfdiUuid        String?
  cfdiXmlPath     String?
  cfdiPdfPath     String?
  employeeId      Int
  payrollId       Int
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  employee        Employee   @relation(fields: [employeeId], references: [id])
  payroll         Payroll    @relation(fields: [payrollId], references: [id])

  @@unique([employeeId, payrollId])
  @@map("payroll_items")
}

model Incidence {
  id          Int             @id @default(autoincrement())
  type        IncidenceType
  date        DateTime
  quantity    Decimal         @db.Decimal(8, 2)
  amount      Decimal?        @db.Decimal(10, 2)
  description String?
  status      IncidenceStatus @default(PENDING)
  employeeId  Int
  companyId   Int
  payrollId   Int?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  company     Company         @relation(fields: [companyId], references: [id])
  employee    Employee        @relation(fields: [employeeId], references: [id])
  payroll     Payroll?        @relation(fields: [payrollId], references: [id])

  @@index([companyId, date])
  @@index([employeeId, type])
  @@map("incidences")
}

model Notification {
  id        Int                  @id @default(autoincrement())
  type      NotificationType
  title     String
  message   String
  priority  NotificationPriority @default(NORMAL)
  read      Boolean              @default(false)
  metadata  Json?
  companyId Int?
  payrollId Int?
  createdAt DateTime             @default(now())
  readAt    DateTime?
  company   Company?             @relation(fields: [companyId], references: [id])
  payroll   Payroll?             @relation(fields: [payrollId], references: [id])

  @@index([companyId, read])
  @@map("notifications")
}

model CompanyWizard {
  id              Int                    @id @default(autoincrement())
  companyId       Int                    @unique
  status          WizardStatus           @default(IN_PROGRESS)
  currentSection  Int                    @default(1)
  currentStep     Int                    @default(1)
  wizardData      Json                   @default("{}")
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  completedAt     DateTime?
  sectionProgress CompanyWizardSection[]
  company         Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_wizards")
}

model CompanyWizardSection {
  id            Int                 @id @default(autoincrement())
  wizardId      Int
  sectionNumber Int
  sectionName   String
  status        SectionStatus       @default(PENDING)
  isOptional    Boolean             @default(false)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  completedAt   DateTime?
  wizard        CompanyWizard       @relation(fields: [wizardId], references: [id], onDelete: Cascade)
  steps         CompanyWizardStep[]

  @@unique([wizardId, sectionNumber])
  @@map("company_wizard_sections")
}

model CompanyWizardStep {
  id          Int                  @id @default(autoincrement())
  sectionId   Int
  stepNumber  Int
  stepName    String
  status      StepStatus           @default(PENDING)
  isOptional  Boolean              @default(false)
  stepData    Json                 @default("{}")
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  completedAt DateTime?
  section     CompanyWizardSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([sectionId, stepNumber])
  @@map("company_wizard_steps")
}

model CompanyGeneralInfo {
  id                 Int      @id @default(autoincrement())
  companyId          Int      @unique
  businessName       String   @db.VarChar(100)
  commercialName     String?
  rfc                String
  tipoPersona        String?
  actividadEconomica String?
  taxRegime          String
  startDate          DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  company            Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_general_info")
}

model CompanyAddress {
  id             Int      @id @default(autoincrement())
  companyId      Int      @unique
  tipoDomicilio  String   @default("matriz")
  nombreSucursal String
  street         String
  exteriorNumber String
  interiorNumber String?
  neighborhood   String
  city           String
  state          String
  zipCode        String
  municipio      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_address")
}

model CompanyLegalRepresentative {
  id                   Int                 @id @default(autoincrement())
  companyId            Int                 @unique
  name                 String
  primerApellido       String?
  segundoApellido      String?
  tipoIdentificacionId Int?
  tipoIdentificacion   IdentificationType? @relation(fields: [tipoIdentificacionId], references: [id])
  uriIdentificacion    String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  company              Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_legal_representative")
}


model CompanyBank {
  id            Int      @id @default(autoincrement())
  companyId     Int
  bankName      String
  bankType      BankType
  accountNumber String
  clabe         String?
  isPrimary     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_banks")
}

model CompanyDigitalCertificate {
  id              Int      @id @default(autoincrement())
  companyId       Int      @unique
  certificateFile String
  keyFile         String
  password        String
  validFrom       DateTime
  validUntil      DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_digital_certificates")
}

model CompanyArea {
  id          Int                 @id @default(autoincrement())
  companyId   Int
  name        String
  description String?
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  company     Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  departments CompanyDepartment[]

  @@map("company_areas")
}

model CompanyDepartment {
  id          Int               @id @default(autoincrement())
  companyId   Int
  areaId      Int?
  name        String
  description String?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  area        CompanyArea?      @relation(fields: [areaId], references: [id])
  company     Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  positions   CompanyPosition[]

  @@map("company_departments")
}

model CompanyPosition {
  id           Int               @id @default(autoincrement())
  companyId    Int
  departmentId Int
  name         String
  description  String?
  minSalary    Decimal?          @db.Decimal(10, 2)
  maxSalary    Decimal?          @db.Decimal(10, 2)
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  company      Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department   CompanyDepartment @relation(fields: [departmentId], references: [id])

  @@map("company_positions")
}

model CompanyBenefit {
  id          Int         @id @default(autoincrement())
  companyId   Int
  name        String
  type        BenefitType
  isLegal     Boolean     @default(false)
  percentage  Decimal?    @db.Decimal(5, 2)
  amount      Decimal?    @db.Decimal(10, 2)
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_benefits")
}

model CompanyBenefitGroup {
  id          Int      @id @default(autoincrement())
  companyId   Int
  name        String
  description String?
  benefits    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_benefit_groups")
}

model CompanySchedule {
  id        Int      @id @default(autoincrement())
  companyId Int
  name      String
  startTime String
  endTime   String
  breakTime Int?
  workDays  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_schedules")
}

model CompanyPolicy {
  id          Int        @id @default(autoincrement())
  companyId   Int
  name        String
  type        PolicyType
  description String?
  content     String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_policies")
}

model TaxRegime {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  name        String
  tipoPersona String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cat_tax_regimes")
}

model EconomicActivity {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cat_economic_activities")
}

model PostalCode {
  id           Int      @id @default(autoincrement())
  postalCode   String   @db.VarChar(5)
  neighborhood String
  city         String
  state        String
  municipality String
  country      String   @default("México")
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([postalCode])
  @@map("cat_postal_codes")
}

model State {
  id           Int      @id @default(autoincrement())
  code         String   @unique @db.VarChar(3)
  name         String
  abbreviation String   @db.VarChar(10)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relaciones
  notarialPowers  CompanyNotarialPower[]
  municipios      Municipio[]
  ciudades        Ciudad[]
  colonias        Colonia[]
  imssDelegaciones IMSSDelegacion[]
  imssDomicilios  IMSSDomicilio[]

  @@map("cat_states")
}

// Catálogo de Tipos de Identificación
model IdentificationType {
  id                        Int                          @id @default(autoincrement())
  code                      String                       @unique
  nombre                    String
  isActive                  Boolean                      @default(true)
  createdAt                 DateTime                     @default(now())
  updatedAt                 DateTime                     @updatedAt
  
  // Relaciones
  companyLegalRepresentatives CompanyLegalRepresentative[]
  
  @@map("cat_identification_types")
}

// Catálogo de Municipios
model Municipio {
  id              Int      @id @default(autoincrement())
  code            String   @unique
  name            String
  stateCode       String   @db.VarChar(3)
  state           State    @relation(fields: [stateCode], references: [code])
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relaciones
  notarialPowers  CompanyNotarialPower[]
  ciudades        Ciudad[]
  colonias        Colonia[]
  imssSubdelegaciones IMSSSubdelegacion[]
  imssDomicilios  IMSSDomicilio[]
  
  @@index([stateCode])
  @@map("cat_municipios")
}

// Catálogo de Ciudades
model Ciudad {
  id              Int      @id @default(autoincrement())
  name            String
  municipioCode   String
  municipio       Municipio @relation(fields: [municipioCode], references: [code])
  stateCode       String   @db.VarChar(3)
  state           State    @relation(fields: [stateCode], references: [code])
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([municipioCode])
  @@index([stateCode])
  @@map("cat_ciudades")
}

// Catálogo de Colonias
model Colonia {
  id              Int      @id @default(autoincrement())
  name            String
  postalCode      String   @db.VarChar(5)
  cityName        String
  municipioCode   String
  municipio       Municipio @relation(fields: [municipioCode], references: [code])
  stateCode       String   @db.VarChar(3)
  state           State    @relation(fields: [stateCode], references: [code])
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relaciones
  imssDomicilios  IMSSDomicilio[]
  
  @@index([postalCode])
  @@index([municipioCode])
  @@index([stateCode])
  @@index([cityName])
  @@map("cat_colonias")
}

// Modelo para Poder Notarial
model CompanyNotarialPower {
  id                 Int        @id @default(autoincrement())
  companyId          Int        @unique
  company            Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  folioPoderNotarial String     @db.VarChar(25)
  fechaEmision       DateTime
  fechaVigencia      DateTime
  nombreFederatario  String
  numeroFederatario  Int
  estadoId           Int
  estado             State      @relation(fields: [estadoId], references: [id])
  municipioId        Int
  municipio          Municipio  @relation(fields: [municipioId], references: [id])
  uriPoderNotarial   String?
  
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  
  @@map("company_notarial_power")
}

// Modelo para las clases de riesgo IMSS
model ClaseRiesgoIMSS {
  id                    Int                     @id @default(autoincrement())
  codigo                String                  @unique @map("codigo")
  nombre                String                  @map("nombre")
  descripcion           String?                 @map("descripcion")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  registrosPatronales   IMSSRegistroPatronal[]

  @@map("clase_riesgo_imss")
}

// Modelo para IMSS Registro Patronal
model IMSSRegistroPatronal {
  id                    Int      @id @default(autoincrement())
  companyId             Int      @unique
  company               Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // Campos IMSS
  nomDomicilio          String?  @map("nomDomicilio")
  actividadEconomica    String?  @map("actividadEconomica")
  clvRegistroPatronal   String?  @map("clvRegistroPatronal")
  claseRiesgoId         Int?     @map("claseRiesgoId")
  claseRiesgo           ClaseRiesgoIMSS? @relation(fields: [claseRiesgoId], references: [id])
  numFraccion           Int?     @map("numFraccion")
  numPrismaRiesgo       Decimal? @map("numPrismaRiesgo") @db.Decimal(5, 2)
  fechaVigencia         DateTime? @map("fechaVigencia")
  uriRegistroPatronal   String?  @map("uriRegistroPatronal")
  
  // Relación con domicilio IMSS
  imssDomicilio         IMSSDomicilio?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("imss_registro_patronal")
}

// Modelo para Fonacot
model Fonacot {
  id                    Int      @id @default(autoincrement())
  companyId             Int      @unique
  company               Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // Registro Patronal FONACOT
  registroPatronal      String?  @db.VarChar(7)
  fechaAfiliacion       DateTime?
  uriArchivoFonacot     String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("fonacot")
}

// Catálogo de Delegaciones IMSS
model IMSSDelegacion {
  id                    Int                     @id @default(autoincrement())
  codigo                String                  @unique @db.VarChar(10)
  nombre                String                  @db.VarChar(100)
  entidadFederativaCode String                  @db.VarChar(3)
  state                 State                   @relation(fields: [entidadFederativaCode], references: [code])
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  // Relaciones
  subdelegaciones       IMSSSubdelegacion[]
  imssDomicilios        IMSSDomicilio[]
  
  @@index([entidadFederativaCode])
  @@map("cat_imss_delegaciones")
}

// Catálogo de Subdelegaciones IMSS
model IMSSSubdelegacion {
  id                    Int                     @id @default(autoincrement())
  codigo                String                  @unique @db.VarChar(10)
  nombre                String                  @db.VarChar(100)
  delegacionId          Int
  delegacion            IMSSDelegacion          @relation(fields: [delegacionId], references: [id])
  municipioCode         String
  municipio             Municipio               @relation(fields: [municipioCode], references: [code])
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  // Relaciones
  imssDomicilios        IMSSDomicilio[]
  
  @@index([delegacionId])
  @@index([municipioCode])
  @@map("cat_imss_subdelegaciones")
}

// Catálogo de Origen de Movimiento IMSS
model IMSSOrigenMovimiento {
  id                    Int                     @id @default(autoincrement())
  codigo                String                  @unique @db.VarChar(10)
  nombre                String                  @db.VarChar(100)
  descripcion           String?
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  // Relaciones
  imssDomicilios        IMSSDomicilio[]
  
  @@map("cat_imss_origen_movimiento")
}

// Modelo para el domicilio IMSS
model IMSSDomicilio {
  id                    Int                     @id @default(autoincrement())
  imssRegistroPatronalId Int                    @unique
  imssRegistroPatronal  IMSSRegistroPatronal    @relation(fields: [imssRegistroPatronalId], references: [id], onDelete: Cascade)
  
  // Campos del formulario
  usarDomicilioMatriz   Boolean                 @default(false)
  codigoPostal          String?                 @db.VarChar(5)
  entidadFederativaCode String?                 @db.VarChar(3)
  state                 State?                  @relation(fields: [entidadFederativaCode], references: [code])
  municipioCode         String?
  municipio             Municipio?              @relation(fields: [municipioCode], references: [code])
  localidad             String?
  coloniaId             Int?
  colonia               Colonia?                @relation(fields: [coloniaId], references: [id])
  delegacionId          Int?
  delegacion            IMSSDelegacion?         @relation(fields: [delegacionId], references: [id])
  subdelegacionId       Int?
  subdelegacion         IMSSSubdelegacion?      @relation(fields: [subdelegacionId], references: [id])
  calle                 String?                 @db.VarChar(100)
  numeroExterior        String?                 @db.VarChar(10)
  origenMovimientoId    Int?
  origenMovimiento      IMSSOrigenMovimiento?   @relation(fields: [origenMovimientoId], references: [id])
  
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  @@map("imss_domicilio")
}

enum UserRole {
  OPERATOR
  CLIENT
  EMPLOYEE
  ADMIN
  DEPARTMENT_HEAD
}

enum CompanyStatus {
  IN_SETUP
  CONFIGURED
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}

enum ContractType {
  INDEFINITE
  FIXED_TERM
  PART_TIME
  CONTRACTOR
  INTERN
}

enum PayrollStatus {
  DRAFT
  CALCULATED
  PENDING_AUTHORIZATION
  AUTHORIZED
  PROCESSED
  TIMBERED
  ERROR
}

enum CFDIStatus {
  PENDING
  PROCESSING
  COMPLETED
  ERROR
}

enum IncidenceType {
  FALTAS
  PERMISOS
  VACACIONES
  TIEMPO_EXTRA
  BONOS
}

enum IncidenceStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
}

enum NotificationType {
  PAYROLL_PENDING_AUTHORIZATION
  PAYROLL_APPROVED
  PAYROLL_REJECTED
  PAYROLL_TIMBERED
  SYSTEM_ALERT
  REMINDER
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum WizardStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum SectionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum BankType {
  CHECKING
  SAVINGS
  PAYROLL
}

enum BenefitType {
  PERCENTAGE
  FIXED_AMOUNT
  DAYS
  HOURS
}

enum PolicyType {
  ATTENDANCE
  VACATION
  REMOTE_WORK
  CODE_OF_CONDUCT
  OTHER
}

enum SexoTrabajador {
  MASCULINO
  FEMENINO
}

enum NacionalidadTrabajador {
  MEXICANA
  EXTRANJERA
}

enum EstadoCivilTrabajador {
  SOLTERO
  CASADO
  DIVORCIADO
  VIUDO
  UNION_LIBRE
}

enum RegimenContratacion {
  ASIMILADOS_ACCIONES
  ASIMILADOS_COMISIONISTAS
  ASIMILADOS_HONORARIOS
  ASIMILADOS_INTEGRANTES_SOCIEDADES
  ASIMILADOS_MIEMBROS_CONSEJOS
  ASIMILADOS_MIEMBROS_COOPERATIVAS
  ASIMILADOS_OTROS
  JUBILADOS
  SUELDOS
}

enum ZonaGeografica {
  RESTO_PAIS
  ZONA_FRONTERA_NORTE
}

enum TipoSalario {
  FIJO
  MIXTO
  VARIABLE
}

enum ClaseRiesgo {
  CLASE_I
  CLASE_II
  CLASE_III
  CLASE_IV
  CLASE_V
}

enum TipoContrato {
  PERIODO_PRUEBA
  CAPACITACION_INICIAL
  OBRA_TIEMPO_DETERMINADO
  TEMPORADA
  TIEMPO_INDETERMINADO
  PRACTICAS_PROFESIONALES
  TELETRABAJO
}

enum TipoTrabajador {
  CONFIANZA
  PRACTICANTE
}

enum SituacionContractual {
  EVENTUAL
  EVENTUAL_CONSTRUCCION
  EVENTUAL_CAMPO
  PERMANENTE
}

enum TipoJornada {
  DIURNA
  MIXTA
  NOCTURNA
}

enum ModalidadTrabajo {
  MIXTO
  PRESENCIAL
  TELETRABAJO
}

enum MetodoPago {
  TRANSFERENCIA
  CHEQUE_NOMINATIVO
  EFECTIVO
}

enum Parentesco {
  CONCUBINA
  CONCUBINO
  ESPOSA
  ESPOSO
  HIJA
  HIJO
  MADRE
  PADRE
}

enum TipoDocumentoFamiliar {
  ACTA_NACIMIENTO
  ACTA_MATRIMONIO
  INE
}

enum TipoDescuento {
  CUOTA_FIJA
  PORCENTAJE
  FACTOR_DESCUENTO
}

enum FormaPagoPension {
  CHEQUE
  TRANSFERENCIA
}

enum TipoDocumento {
  AVISO_RETENCION_INFONAVIT
  AVISO_SUSPENSION_INFONAVIT
  CARTA_RECOMENDACION
  CURP
  COMPROBANTE_DOMICILIO
  COMPROBANTE_ESTUDIOS
  RFC
  CURRICULUM_VITAE
  IDENTIFICACION_OFICIAL
  NSS
  OFICIO_RETENCION_PENSION
  SOLICITUD_EMPLEO
  TARJETA_RESIDENCIA
  OTRO
}

//====================================================
// NUEVOS MODELOS PARA LA GESTIÓN DE TRABAJADORES
//====================================================

// Modelo para tracking del estado del wizard
model WizardProgress {
  id              Int              @id @default(autoincrement())
  company         Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       Int              @unique
  currentSection  Int              @default(1)
  currentStep     Int              @default(1)
  isCompleted     Boolean          @default(false)
  startedAt       DateTime         @default(now())
  completedAt     DateTime?
  sectionProgress SectionProgress[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@map("wizard_progress")
}

model SectionProgress {
  id              Int            @id @default(autoincrement())
  wizardProgress  WizardProgress @relation(fields: [wizardProgressId], references: [id], onDelete: Cascade)
  wizardProgressId Int
  sectionNumber   Int
  name            String
  status          String         @default("PENDING") // "PENDING", "IN_PROGRESS", "COMPLETED", "SKIPPED"
  startedAt       DateTime?
  completedAt     DateTime?
  steps           StepProgress[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@index([wizardProgressId])
  @@map("section_progress")
}

model StepProgress {
  id                Int             @id @default(autoincrement())
  sectionProgress   SectionProgress @relation(fields: [sectionProgressId], references: [id], onDelete: Cascade)
  sectionProgressId Int
  stepNumber        Int
  name              String
  status            String          @default("PENDING") // "PENDING", "IN_PROGRESS", "COMPLETED", "SKIPPED"
  data              Json?
  startedAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([sectionProgressId])
  @@map("step_progress")
}

// Modelos para estructura organizacional (sección 5 del wizard)
model OrganizationalArea {
  id             Int                       @id @default(autoincrement())
  name           String
  description    String?
  company        Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      Int
  departments    OrganizationalDepartment[]
  contractConditions WorkerContractCondition[]
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  
  @@index([companyId])
  @@map("organizational_areas")
}

model OrganizationalDepartment {
  id             Int                      @id @default(autoincrement())
  name           String
  description    String?
  area           OrganizationalArea?      @relation(fields: [areaId], references: [id])
  areaId         Int?
  company        Company                  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      Int
  positions      OrganizationalPosition[]
  contractConditions WorkerContractCondition[]
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  
  @@index([companyId])
  @@index([areaId])
  @@map("organizational_departments")
}

model OrganizationalPosition {
  id             Int                       @id @default(autoincrement())
  name           String
  description    String?
  baseSalary     Decimal?                  @db.Decimal(10, 2)
  hierarchyLevel String?
  department     OrganizationalDepartment? @relation(fields: [departmentId], references: [id])
  departmentId   Int?
  company        Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      Int
  contractConditions WorkerContractCondition[]
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  
  @@index([companyId])
  @@index([departmentId])
  @@map("organizational_positions")
}

// Modelo para horarios de trabajo (sección 8.1 del wizard)
model WorkSchedule {
  id             Int                      @id @default(autoincrement())
  name           String
  startTime      String
  endTime        String
  workDays       Int[]                   // Array de días (1=Lunes, 2=Martes, etc.)
  breakHours     Int?
  company        Company                 @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      Int
  contractConditions WorkerContractCondition[]
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  
  @@index([companyId])
  @@map("work_schedules")
}

// Modelos para alta de trabajadores (sección 8.2 del wizard)
model WorkerDetails {
  id               Int                    @id @default(autoincrement())
  employee         Employee               @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId       Int                    @unique
  company          Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId        Int
  numeroTrabajador Int
  nombres          String
  apellidoPaterno  String
  apellidoMaterno  String?
  fechaNacimiento  DateTime
  sexo             SexoTrabajador?
  nacionalidad     NacionalidadTrabajador?
  estadoCivil      EstadoCivilTrabajador
  rfc              String                 @db.VarChar(13)
  curp             String                 @db.VarChar(18)
  nss              String                 @db.VarChar(11)
  umf              Int?
  fotografia       String?
  
  // Relaciones
  address             WorkerAddress?
  contractConditions  WorkerContractCondition?
  paymentData         WorkerPaymentData?
  familyMembers       WorkerFamilyMember[]
  alimony             WorkerAlimony[]
  infonavitCredits    WorkerInfonavitCredit[]
  fonacotCredits      WorkerFonacotCredit[]
  documents           WorkerDocument[]
  
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  
  @@unique([companyId, numeroTrabajador])
  @@unique([companyId, rfc])
  @@unique([companyId, curp])
  @@map("worker_details")
}

model WorkerAddress {
  id                 Int           @id @default(autoincrement())
  workerDetails      WorkerDetails @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)
  workerDetailsId    Int           @unique
  correoElectronico  String
  telefonoCelular    String        @db.VarChar(10)
  codigoPostal       String
  pais               String
  entidadFederativa  String
  municipioAlcaldia  String
  colonia            String?
  calle              String?
  numeroExterior     String?
  numeroInterior     String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  
  @@map("worker_addresses")
}

model WorkerContractCondition {
  id                     Int                      @id @default(autoincrement())
  workerDetails          WorkerDetails            @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)
  workerDetailsId        Int                      @unique
  sucursal               String                   @default("MATRIZ")
  area                   OrganizationalArea?      @relation(fields: [areaId], references: [id])
  areaId                 Int?
  department             OrganizationalDepartment? @relation(fields: [departmentId], references: [id])
  departmentId           Int?
  position               OrganizationalPosition?  @relation(fields: [positionId], references: [id])
  positionId             Int?
  regimenContratacion    RegimenContratacion
  zonaGeografica         ZonaGeografica
  tipoSalario            TipoSalario
  fechaIngreso           DateTime
  fechaAntiguedad        DateTime
  salarioDiario          Decimal                  @db.Decimal(10, 2)
  sueldoBaseCotizacion   Decimal                  @db.Decimal(10, 2)
  registroPatronal       String
  claseRiesgo            ClaseRiesgo
  tipoContrato           TipoContrato
  tipoTrabajador         TipoTrabajador
  situacionContractual   SituacionContractual
  duracionContrato       Int?
  calendarioNomina       String
  tipoJornada            TipoJornada
  schedule               WorkSchedule?            @relation(fields: [horarioId], references: [id])
  horarioId              Int?
  modalidadTrabajo       ModalidadTrabajo
  observacion            String?
  presentaDeclaracionAnual Boolean                @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  
  @@map("worker_contract_conditions")
}

model WorkerPaymentData {
  id                   Int           @id @default(autoincrement())
  workerDetails        WorkerDetails @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)
  workerDetailsId      Int           @unique
  metodoPago           MetodoPago
  institucionFinanciera String?
  cuentaBancaria       String?
  cuentaClabe          String?       @db.VarChar(18)
  numeroTarjeta        String?       @db.VarChar(16)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  
  @@map("worker_payment_data")
}

model WorkerFamilyMember {
  id                Int             @id @default(autoincrement())
  workerDetails     WorkerDetails   @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)
  workerDetailsId   Int
  nombreCompleto    String
  parentesco        Parentesco
  tipoDocumento     TipoDocumentoFamiliar?
  documentoUrl      String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([workerDetailsId])
  @@map("worker_family_members")
}

model WorkerAlimony {
  id                    Int             @id @default(autoincrement())
  workerDetails         WorkerDetails   @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)
  workerDetailsId       Int
  numeroJuicio          String
  tipoDescuento         TipoDescuento
  valor                 Decimal         @db.Decimal(10, 2)
  fechaInicio           DateTime
  nombreBeneficiario    String
  formaPago             FormaPagoPension
  institucionFinanciera String?
  cuentaBancaria        String?
  cuentaClabe           String?         @db.VarChar(18)
  numeroTarjeta         String?         @db.VarChar(16)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  
  @@index([workerDetailsId])
  @@map("worker_alimony")
}

model WorkerInfonavitCredit {
  id               Int             @id @default(autoincrement())
  workerDetails    WorkerDetails   @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)
  workerDetailsId  Int
  numeroCredito    String
  tipoDescuento    TipoDescuento
  valor            Decimal         @db.Decimal(10, 2)
  fechaInicio      DateTime
  fechaTermino     DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  @@index([workerDetailsId])
  @@map("worker_infonavit_credits")
}

model WorkerFonacotCredit {
  id               Int             @id @default(autoincrement())
  workerDetails    WorkerDetails   @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)
  workerDetailsId  Int
  numeroCredito    String
  tipoDescuento    TipoDescuento
  valor            Decimal         @db.Decimal(10, 2)
  fechaInicio      DateTime
  fechaTermino     DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  @@index([workerDetailsId])
  @@map("worker_fonacot_credits")
}

model WorkerDocument {
  id                Int             @id @default(autoincrement())
  workerDetails     WorkerDetails   @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)
  workerDetailsId   Int
  tipoDocumento     TipoDocumento
  nombreDocumento   String?
  documentoUrl      String
  fechaModificacion DateTime        @default(now())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([workerDetailsId])
  @@map("worker_documents")
}

model CompanyDocumentChecklist {
  id                           Int      @id @default(autoincrement())
  companyId                    Int      @unique
  company                      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  constanciaSituacionFiscal    Boolean  @default(false)
  altaPatronal                 Boolean  @default(false)
  altaFonacot                  Boolean  @default(false)
  sellosDigitales              Boolean  @default(false)
  catalogoTrabajadores         Boolean  @default(false)
  plantillaIncidencias         Boolean  @default(false)
  identificacion               Boolean  @default(false)
  cuentaBancaria               Boolean  @default(false)
  representanteLegal           Boolean  @default(false)
  actaConstitutiva             Boolean  @default(false)
  allDocumentsUploaded         Boolean  @default(false)
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  @@map("company_document_checklist")
}

model CompanyDocument {
  id               Int              @id @default(autoincrement())
  companyId        Int
  company          Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  documentType     DocumentType
  fileName         String
  filePath         String
  fileSize         Int
  mimeType         String
  uploadedBy       UserRole
  uploadedByUserId Int
  notes            String?
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([companyId])
  @@map("company_documents")
}

enum DocumentType {
  CONSTANCIA_SITUACION_FISCAL
  ALTA_PATRONAL
  ALTA_FONACOT
  SELLOS_DIGITALES
  CATALOGO_TRABAJADORES
  PLANTILLA_INCIDENCIAS
  IDENTIFICACION
  CUENTA_BANCARIA
  REPRESENTANTE_LEGAL
  ACTA_CONSTITUTIVA
}