generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String
  role          UserRole
  isActive      Boolean        @default(true)
  companyId     Int?
  employeeId    Int?           @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lastLoginAt   DateTime?
  firstName     String?
  lastName      String?
  phone         String?
  photoUrl      String?
  refreshTokens RefreshToken[]
  company       Company?       @relation(fields: [companyId], references: [id])
  employee      Employee?      @relation(fields: [employeeId], references: [id])

  @@index([email, isActive])
  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model InvitationToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  email     String
  companyId Int
  used      Boolean   @default(false)
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  metadata  Json?
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([token, used])
  @@map("invitation_tokens")
}

model Company {
  id                  Int                         @id @default(autoincrement())
  name                String
  rfc                 String                      @unique
  legalName           String
  address             String
  email               String
  phone               String?
  status              CompanyStatus               @default(IN_SETUP)
  employeesCount      Int                         @default(0)
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  calendars           Calendar[]
  companyAddress      CompanyAddress?
  areas               CompanyArea[]
  banks               CompanyBank[]
  benefitGroups       CompanyBenefitGroup[]
  benefits            CompanyBenefit[]
  departments         CompanyDepartment[]
  digitalCertificate  CompanyDigitalCertificate?
  generalInfo         CompanyGeneralInfo?
  legalRepresentative CompanyLegalRepresentative?
  policies            CompanyPolicy[]
  positions           CompanyPosition[]
  schedules           CompanySchedule[]
  taxObligations      CompanyTaxObligations?
  wizard              CompanyWizard?
  employees           Employee[]
  incidences          Incidence[]
  invitationTokens    InvitationToken[]
  notifications       Notification[]
  payrolls            Payroll[]
  users               User[]

  @@index([status])
  @@map("companies")
}

model Employee {
  id               Int            @id @default(autoincrement())
  employeeNumber   String         @unique
  name             String
  email            String?
  rfc              String         @unique
  position         String
  department       String
  status           EmployeeStatus @default(ACTIVE)
  hireDate         DateTime
  contractType     ContractType
  workSchedule     String?
  baseSalary       Decimal        @db.Decimal(10, 2)
  dateOfBirth      DateTime?
  address          String?
  phone            String?
  emergencyContact String?
  bankName         String?
  bankAccount      String?
  clabe            String?
  taxRegime        String?
  companyId        Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  company          Company        @relation(fields: [companyId], references: [id])
  incidences       Incidence[]
  payrollItems     PayrollItem[]
  user             User?

  @@index([companyId, status])
  @@map("employees")
}

model Calendar {
  id        Int      @id @default(autoincrement())
  name      String
  year      Int
  workDays  Json
  holidays  Json
  isDefault Boolean  @default(false)
  companyId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, year])
  @@map("calendars")
}

model Payroll {
  id              Int            @id @default(autoincrement())
  period          String
  periodStart     DateTime
  periodEnd       DateTime
  status          PayrollStatus  @default(DRAFT)
  totalGross      Decimal        @db.Decimal(12, 2)
  totalDeductions Decimal        @db.Decimal(12, 2)
  totalNet        Decimal        @db.Decimal(12, 2)
  employeeCount   Int
  processedAt     DateTime?
  authorizedAt    DateTime?
  authorizedBy    String?
  xmlPath         String?
  pdfPath         String?
  companyId       Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  incidences      Incidence[]
  notifications   Notification[]
  payrollItems    PayrollItem[]
  company         Company        @relation(fields: [companyId], references: [id])

  @@index([companyId, status])
  @@index([periodStart, periodEnd])
  @@map("payrolls")
}

model PayrollItem {
  id              Int        @id @default(autoincrement())
  baseSalary      Decimal    @db.Decimal(10, 2)
  overtime        Decimal    @default(0) @db.Decimal(10, 2)
  bonuses         Decimal    @default(0) @db.Decimal(10, 2)
  totalGross      Decimal    @db.Decimal(10, 2)
  incomeTax       Decimal    @default(0) @db.Decimal(10, 2)
  socialSecurity  Decimal    @default(0) @db.Decimal(10, 2)
  otherDeductions Decimal    @default(0) @db.Decimal(10, 2)
  totalDeductions Decimal    @db.Decimal(10, 2)
  netSalary       Decimal    @db.Decimal(10, 2)
  workedDays      Int
  cfdiStatus      CFDIStatus @default(PENDING)
  cfdiUuid        String?
  cfdiXmlPath     String?
  cfdiPdfPath     String?
  employeeId      Int
  payrollId       Int
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  employee        Employee   @relation(fields: [employeeId], references: [id])
  payroll         Payroll    @relation(fields: [payrollId], references: [id])

  @@unique([employeeId, payrollId])
  @@map("payroll_items")
}

model Incidence {
  id          Int             @id @default(autoincrement())
  type        IncidenceType
  date        DateTime
  quantity    Decimal         @db.Decimal(8, 2)
  amount      Decimal?        @db.Decimal(10, 2)
  description String?
  status      IncidenceStatus @default(PENDING)
  employeeId  Int
  companyId   Int
  payrollId   Int?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  company     Company         @relation(fields: [companyId], references: [id])
  employee    Employee        @relation(fields: [employeeId], references: [id])
  payroll     Payroll?        @relation(fields: [payrollId], references: [id])

  @@index([companyId, date])
  @@index([employeeId, type])
  @@map("incidences")
}

model Notification {
  id        Int                  @id @default(autoincrement())
  type      NotificationType
  title     String
  message   String
  priority  NotificationPriority @default(NORMAL)
  read      Boolean              @default(false)
  metadata  Json?
  companyId Int?
  payrollId Int?
  createdAt DateTime             @default(now())
  readAt    DateTime?
  company   Company?             @relation(fields: [companyId], references: [id])
  payroll   Payroll?             @relation(fields: [payrollId], references: [id])

  @@index([companyId, read])
  @@map("notifications")
}

model CompanyWizard {
  id              Int                    @id @default(autoincrement())
  companyId       Int                    @unique
  status          WizardStatus           @default(IN_PROGRESS)
  currentSection  Int                    @default(1)
  currentStep     Int                    @default(1)
  wizardData      Json                   @default("{}")
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  completedAt     DateTime?
  sectionProgress CompanyWizardSection[]
  company         Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_wizards")
}

model CompanyWizardSection {
  id            Int                 @id @default(autoincrement())
  wizardId      Int
  sectionNumber Int
  sectionName   String
  status        SectionStatus       @default(PENDING)
  isOptional    Boolean             @default(false)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  completedAt   DateTime?
  wizard        CompanyWizard       @relation(fields: [wizardId], references: [id], onDelete: Cascade)
  steps         CompanyWizardStep[]

  @@unique([wizardId, sectionNumber])
  @@map("company_wizard_sections")
}

model CompanyWizardStep {
  id          Int                  @id @default(autoincrement())
  sectionId   Int
  stepNumber  Int
  stepName    String
  status      StepStatus           @default(PENDING)
  isOptional  Boolean              @default(false)
  stepData    Json                 @default("{}")
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  completedAt DateTime?
  section     CompanyWizardSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([sectionId, stepNumber])
  @@map("company_wizard_steps")
}

model CompanyGeneralInfo {
  id                 Int      @id @default(autoincrement())
  companyId          Int      @unique
  businessName       String   @db.VarChar(100)
  commercialName     String?
  rfc                String
  tipoPersona        String?
  actividadEconomica String?
  taxRegime          String
  startDate          DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  company            Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_general_info")
}

model CompanyAddress {
  id             Int      @id @default(autoincrement())
  companyId      Int      @unique
  street         String
  exteriorNumber String
  interiorNumber String?
  neighborhood   String
  city           String
  state          String
  zipCode        String
  country        String   @default("México")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_address")
}

model CompanyLegalRepresentative {
  id            Int      @id @default(autoincrement())
  companyId     Int      @unique
  name          String
  rfc           String
  curp          String?
  position      String
  notarialPower String?
  notaryNumber  String?
  notaryName    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_legal_representative")
}

model CompanyTaxObligations {
  id                  Int      @id @default(autoincrement())
  companyId           Int      @unique
  imssRegistration    String?
  imssClassification  String?
  imssRiskClass       String?
  imssAddress         String?
  imssCity            String?
  imssState           String?
  imssZipCode         String?
  fonacotRegistration String?
  fonacotCenter       String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  company             Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_tax_obligations")
}

model CompanyBank {
  id            Int      @id @default(autoincrement())
  companyId     Int
  bankName      String
  bankType      BankType
  accountNumber String
  clabe         String?
  isPrimary     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_banks")
}

model CompanyDigitalCertificate {
  id              Int      @id @default(autoincrement())
  companyId       Int      @unique
  certificateFile String
  keyFile         String
  password        String
  validFrom       DateTime
  validUntil      DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_digital_certificates")
}

model CompanyArea {
  id          Int                 @id @default(autoincrement())
  companyId   Int
  name        String
  description String?
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  company     Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  departments CompanyDepartment[]

  @@map("company_areas")
}

model CompanyDepartment {
  id          Int               @id @default(autoincrement())
  companyId   Int
  areaId      Int?
  name        String
  description String?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  area        CompanyArea?      @relation(fields: [areaId], references: [id])
  company     Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  positions   CompanyPosition[]

  @@map("company_departments")
}

model CompanyPosition {
  id           Int               @id @default(autoincrement())
  companyId    Int
  departmentId Int
  name         String
  description  String?
  minSalary    Decimal?          @db.Decimal(10, 2)
  maxSalary    Decimal?          @db.Decimal(10, 2)
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  company      Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department   CompanyDepartment @relation(fields: [departmentId], references: [id])

  @@map("company_positions")
}

model CompanyBenefit {
  id          Int         @id @default(autoincrement())
  companyId   Int
  name        String
  type        BenefitType
  isLegal     Boolean     @default(false)
  percentage  Decimal?    @db.Decimal(5, 2)
  amount      Decimal?    @db.Decimal(10, 2)
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_benefits")
}

model CompanyBenefitGroup {
  id          Int      @id @default(autoincrement())
  companyId   Int
  name        String
  description String?
  benefits    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_benefit_groups")
}

model CompanySchedule {
  id        Int      @id @default(autoincrement())
  companyId Int
  name      String
  startTime String
  endTime   String
  breakTime Int?
  workDays  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_schedules")
}

model CompanyPolicy {
  id          Int        @id @default(autoincrement())
  companyId   Int
  name        String
  type        PolicyType
  description String?
  content     String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_policies")
}

model TaxRegime {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  name        String
  tipoPersona String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cat_tax_regimes")
}

model EconomicActivity {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cat_economic_activities")
}

model PostalCode {
  id           Int      @id @default(autoincrement())
  postalCode   String   @db.VarChar(5)
  neighborhood String
  city         String
  state        String
  municipality String
  country      String   @default("México")
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([postalCode])
  @@map("cat_postal_codes")
}

model State {
  id           Int      @id @default(autoincrement())
  code         String   @unique @db.VarChar(3)
  name         String
  abbreviation String   @db.VarChar(10)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("cat_states")
}

enum UserRole {
  OPERATOR
  CLIENT
  EMPLOYEE
  ADMIN
  DEPARTMENT_HEAD
}

enum CompanyStatus {
  IN_SETUP
  CONFIGURED
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}

enum ContractType {
  INDEFINITE
  FIXED_TERM
  PART_TIME
  CONTRACTOR
  INTERN
}

enum PayrollStatus {
  DRAFT
  CALCULATED
  PENDING_AUTHORIZATION
  AUTHORIZED
  PROCESSED
  TIMBERED
  ERROR
}

enum CFDIStatus {
  PENDING
  PROCESSING
  COMPLETED
  ERROR
}

enum IncidenceType {
  FALTAS
  PERMISOS
  VACACIONES
  TIEMPO_EXTRA
  BONOS
}

enum IncidenceStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
}

enum NotificationType {
  PAYROLL_PENDING_AUTHORIZATION
  PAYROLL_APPROVED
  PAYROLL_REJECTED
  PAYROLL_TIMBERED
  SYSTEM_ALERT
  REMINDER
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum WizardStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum SectionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum BankType {
  CHECKING
  SAVINGS
  PAYROLL
}

enum BenefitType {
  PERCENTAGE
  FIXED_AMOUNT
  DAYS
  HOURS
}

enum PolicyType {
  ATTENDANCE
  VACATION
  REMOTE_WORK
  CODE_OF_CONDUCT
  OTHER
}
