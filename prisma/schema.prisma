generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                 @id @default(autoincrement())
  email                     String              @unique
  password                  String
  username                  String?
  role                      UserRole
  isActive                  Boolean             @default(true)
  companyId                 Int?
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  lastLoginAt               DateTime?
  firstName                 String?
  lastName                  String?
  phone                     String?
  photoUrl                  String?
  workerDetailsId           Int?                @unique
  setupToken                String?             @unique
  setupTokenExpiry          DateTime?
  managedByAdminId          Int?
  managedCompanies          Company[]           @relation("AdminCompanies")
  approvedIncidences        Incidence[]         @relation("IncidenceApprovedBy")
  createdIncidences         Incidence[]         @relation("IncidenceCreatedBy")
  assignedOperatorCompanies OperatorCompany[]   @relation("AssignedOperatorCompanies")
  operatorCompanies         OperatorCompany[]   @relation("OperatorCompanies")
  approvedPayrolls          Payroll[]           @relation("PayrollApprovedBy")
  createdPayrolls           Payroll[]           @relation("PayrollCreatedBy")
  refreshTokens             RefreshToken[]
  requestAttachments        RequestAttachment[]
  requestComments           RequestComment[]
  requestHistory            RequestHistory[]
  assignedRequests          Request[]           @relation("RequestAssignedTo")
  createdRequests           Request[]           @relation("RequestClient")
  company                   Company?            @relation(fields: [companyId], references: [id])
  managedByAdmin            User?               @relation("AdminOperators", fields: [managedByAdminId], references: [id])
  managedOperators          User[]              @relation("AdminOperators")
  workerDetails             WorkerDetails?      @relation(fields: [workerDetailsId], references: [id])
  vinculacionesJefe         VinculacionJefe[]

  @@index([email, isActive])
  @@index([managedByAdminId])
  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model InvitationToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  email     String
  companyId Int
  used      Boolean   @default(false)
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  metadata  Json?
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([token, used])
  @@map("invitation_tokens")
}

model Calendar {
  id        Int      @id @default(autoincrement())
  name      String
  year      Int
  workDays  Json
  holidays  Json
  isDefault Boolean  @default(false)
  companyId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, year])
  @@map("calendars")
}

model PayrollCalendar {
  id              Int         @id @default(autoincrement())
  companyId       Int
  name            String
  payFrequency    String
  daysBeforeClose Int         @default(0)
  startDate       DateTime
  periodNumber    Int         @default(1)
  payNaturalDays  Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  incidences      Incidence[]
  company         Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  payrolls        Payroll[]

  @@map("payroll_calendars")
}

model Payroll {
  id                    Int                   @id @default(autoincrement())
  period                String
  periodStart           DateTime
  periodEnd             DateTime
  status                PayrollStatus         @default(DRAFT)
  totalGross            Decimal               @db.Decimal(12, 2)
  totalDeductions       Decimal               @db.Decimal(12, 2)
  totalNet              Decimal               @db.Decimal(12, 2)
  employeeCount         Int
  processedAt           DateTime?
  authorizedAt          DateTime?
  authorizedBy          String?
  xmlPath               String?
  pdfPath               String?
  companyId             Int
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  approvalStatus        PayrollApprovalStatus @default(PENDING)
  clientApprovalDate    DateTime?
  clientApprovedBy      Int?
  clientRejectionReason String?
  createdBy             Int?
  payrollCalendarId     Int?
  incidences            Incidence[]
  notifications         Notification[]
  payrollItems          PayrollItem[]
  clientApprovedByUser  User?                 @relation("PayrollApprovedBy", fields: [clientApprovedBy], references: [id])
  company               Company               @relation(fields: [companyId], references: [id])
  createdByUser         User?                 @relation("PayrollCreatedBy", fields: [createdBy], references: [id])
  payrollCalendar       PayrollCalendar?      @relation(fields: [payrollCalendarId], references: [id])

  @@index([companyId, status])
  @@index([periodStart, periodEnd])
  @@map("payrolls")
}

model PayrollItem {
  id              Int           @id @default(autoincrement())
  baseSalary      Decimal       @db.Decimal(10, 2)
  overtime        Decimal       @default(0) @db.Decimal(10, 2)
  bonuses         Decimal       @default(0) @db.Decimal(10, 2)
  totalGross      Decimal       @db.Decimal(10, 2)
  incomeTax       Decimal       @default(0) @db.Decimal(10, 2)
  socialSecurity  Decimal       @default(0) @db.Decimal(10, 2)
  otherDeductions Decimal       @default(0) @db.Decimal(10, 2)
  totalDeductions Decimal       @db.Decimal(10, 2)
  netSalary       Decimal       @db.Decimal(10, 2)
  workedDays      Int
  cfdiStatus      CFDIStatus    @default(PENDING)
  cfdiUuid        String?
  cfdiXmlPath     String?
  cfdiPdfPath     String?
  payrollId       Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  workerDetailsId Int
  payroll         Payroll       @relation(fields: [payrollId], references: [id])
  workerDetails   WorkerDetails @relation(fields: [workerDetailsId], references: [id])

  @@unique([workerDetailsId, payrollId])
  @@map("payroll_items")
}

model Incidence {
  id                Int                   @id @default(autoincrement())
  type              IncidenceType?
  date              DateTime
  quantity          Decimal               @db.Decimal(8, 2)
  amount            Decimal?              @db.Decimal(10, 2)
  description       String?
  status            IncidenceStatus       @default(PENDING)
  companyId         Int
  payrollId         Int?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  approvalDate      DateTime?
  approvedBy        Int?
  createdBy         UserRole              @default(CLIENT)
  createdByUserId   Int?
  payrollCalendarId Int?
  periodId          String?
  rejectionReason   String?
  employeeId        Int
  customTypeId      Int?
  approvedByUser    User?                 @relation("IncidenceApprovedBy", fields: [approvedBy], references: [id])
  company           Company               @relation(fields: [companyId], references: [id])
  createdByUser     User?                 @relation("IncidenceCreatedBy", fields: [createdByUserId], references: [id])
  customType        CompanyIncidenceType? @relation(fields: [customTypeId], references: [id])
  workerDetails     WorkerDetails         @relation(fields: [employeeId], references: [id])
  payrollCalendar   PayrollCalendar?      @relation(fields: [payrollCalendarId], references: [id])
  payroll           Payroll?              @relation(fields: [payrollId], references: [id])

  @@index([companyId, date])
  @@index([employeeId, type])
  @@index([payrollCalendarId, periodId])
  @@index([companyId, status, createdBy])
  @@map("incidences")
}

model Notification {
  id        Int                  @id @default(autoincrement())
  type      NotificationType
  title     String
  message   String
  priority  NotificationPriority @default(NORMAL)
  read      Boolean              @default(false)
  metadata  Json?
  companyId Int?
  payrollId Int?
  createdAt DateTime             @default(now())
  readAt    DateTime?
  company   Company?             @relation(fields: [companyId], references: [id])
  payroll   Payroll?             @relation(fields: [payrollId], references: [id])

  @@index([companyId, read])
  @@map("notifications")
}

model TaxRegime {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  name        String
  tipoPersona String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cat_tax_regimes")
}

model EconomicActivity {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cat_economic_activities")
}

model PostalCode {
  id           Int      @id @default(autoincrement())
  postalCode   String   @db.VarChar(5)
  neighborhood String
  city         String
  state        String
  municipality String
  country      String   @default("MÃ©xico")
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([postalCode])
  @@map("cat_postal_codes")
}

model State {
  id               Int                    @id @default(autoincrement())
  code             String                 @unique @db.VarChar(3)
  name             String
  abbreviation     String                 @db.VarChar(10)
  isActive         Boolean                @default(true)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  ciudades         Ciudad[]
  colonias         Colonia[]
  imssDelegaciones IMSSDelegacion[]
  municipios       Municipio[]
  notarialPowers   CompanyNotarialPower[]
  imssDomicilios   IMSSDomicilio[]

  @@map("cat_states")
}

model IdentificationType {
  id                          Int                          @id @default(autoincrement())
  code                        String                       @unique
  nombre                      String
  isActive                    Boolean                      @default(true)
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  companyLegalRepresentatives CompanyLegalRepresentative[]

  @@map("cat_identification_types")
}

model Municipio {
  id                  Int                    @id @default(autoincrement())
  code                String                 @unique
  name                String
  stateCode           String                 @db.VarChar(3)
  isActive            Boolean                @default(true)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  ciudades            Ciudad[]
  colonias            Colonia[]
  imssSubdelegaciones IMSSSubdelegacion[]
  state               State                  @relation(fields: [stateCode], references: [code])
  notarialPowers      CompanyNotarialPower[]
  imssDomicilios      IMSSDomicilio[]

  @@index([stateCode])
  @@map("cat_municipios")
}

model Ciudad {
  id            Int       @id @default(autoincrement())
  name          String
  municipioCode String
  stateCode     String    @db.VarChar(3)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  municipio     Municipio @relation(fields: [municipioCode], references: [code])
  state         State     @relation(fields: [stateCode], references: [code])

  @@index([municipioCode])
  @@index([stateCode])
  @@map("cat_ciudades")
}

model Colonia {
  id             Int             @id @default(autoincrement())
  name           String
  postalCode     String          @db.VarChar(5)
  cityName       String
  municipioCode  String
  stateCode      String          @db.VarChar(3)
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  municipio      Municipio       @relation(fields: [municipioCode], references: [code])
  state          State           @relation(fields: [stateCode], references: [code])
  imssDomicilios IMSSDomicilio[]

  @@index([postalCode])
  @@index([municipioCode])
  @@index([stateCode])
  @@index([cityName])
  @@map("cat_colonias")
}

model ClaseRiesgoIMSS {
  id                  Int                    @id @default(autoincrement())
  codigo              String                 @unique @map("codigo")
  nombre              String                 @map("nombre")
  descripcion         String?                @map("descripcion")
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  registrosPatronales IMSSRegistroPatronal[]

  @@map("clase_riesgo_imss")
}

model IMSSDelegacion {
  id                    Int                 @id @default(autoincrement())
  codigo                String              @unique @db.VarChar(10)
  nombre                String              @db.VarChar(100)
  entidadFederativaCode String              @db.VarChar(3)
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  state                 State               @relation(fields: [entidadFederativaCode], references: [code])
  subdelegaciones       IMSSSubdelegacion[]
  imssDomicilios        IMSSDomicilio[]

  @@index([entidadFederativaCode])
  @@map("cat_imss_delegaciones")
}

model IMSSSubdelegacion {
  id             Int             @id @default(autoincrement())
  codigo         String          @unique @db.VarChar(10)
  nombre         String          @db.VarChar(100)
  delegacionId   Int
  municipioCode  String
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  delegacion     IMSSDelegacion  @relation(fields: [delegacionId], references: [id])
  municipio      Municipio       @relation(fields: [municipioCode], references: [code])
  imssDomicilios IMSSDomicilio[]

  @@index([delegacionId])
  @@index([municipioCode])
  @@map("cat_imss_subdelegaciones")
}

model IMSSOrigenMovimiento {
  id             Int             @id @default(autoincrement())
  codigo         String          @unique @db.VarChar(10)
  nombre         String          @db.VarChar(100)
  descripcion    String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  imssDomicilios IMSSDomicilio[]

  @@map("cat_imss_origen_movimiento")
}

model IMSSDomicilio {
  id                     Int                   @id @default(autoincrement())
  imssRegistroPatronalId Int                   @unique
  usarDomicilioMatriz    Boolean               @default(false)
  codigoPostal           String?               @db.VarChar(5)
  entidadFederativaCode  String?               @db.VarChar(3)
  municipioCode          String?
  localidad              String?
  coloniaId              Int?
  delegacionId           Int?
  subdelegacionId        Int?
  calle                  String?               @db.VarChar(100)
  numeroExterior         String?               @db.VarChar(10)
  origenMovimientoId     Int?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  colonia                Colonia?              @relation(fields: [coloniaId], references: [id])
  delegacion             IMSSDelegacion?       @relation(fields: [delegacionId], references: [id])
  state                  State?                @relation(fields: [entidadFederativaCode], references: [code])
  imssRegistroPatronal   IMSSRegistroPatronal  @relation(fields: [imssRegistroPatronalId], references: [id], onDelete: Cascade)
  municipio              Municipio?            @relation(fields: [municipioCode], references: [code])
  origenMovimiento       IMSSOrigenMovimiento? @relation(fields: [origenMovimientoId], references: [id])
  subdelegacion          IMSSSubdelegacion?    @relation(fields: [subdelegacionId], references: [id])

  @@map("imss_domicilio")
}

model WizardProgress {
  id              Int               @id @default(autoincrement())
  companyId       Int               @unique
  currentSection  Int               @default(1)
  currentStep     Int               @default(1)
  isCompleted     Boolean           @default(false)
  startedAt       DateTime          @default(now())
  completedAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  sectionProgress SectionProgress[]
  company         Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("wizard_progress")
}

model SectionProgress {
  id               Int            @id @default(autoincrement())
  wizardProgressId Int
  sectionNumber    Int
  name             String
  status           String         @default("PENDING")
  startedAt        DateTime?
  completedAt      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  wizardProgress   WizardProgress @relation(fields: [wizardProgressId], references: [id], onDelete: Cascade)
  steps            StepProgress[]

  @@index([wizardProgressId])
  @@map("section_progress")
}

model StepProgress {
  id                Int             @id @default(autoincrement())
  sectionProgressId Int
  stepNumber        Int
  name              String
  status            String          @default("PENDING")
  data              Json?
  startedAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  sectionProgress   SectionProgress @relation(fields: [sectionProgressId], references: [id], onDelete: Cascade)

  @@index([sectionProgressId])
  @@map("step_progress")
}

model WorkSchedule {
  id                 Int                       @id @default(autoincrement())
  name               String
  startTime          String
  endTime            String
  workDays           Int[]
  breakHours         Int?
  companyId          Int
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  company            Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contractConditions WorkerContractCondition[]

  @@index([companyId])
  @@map("work_schedules")
}

model WorkerDetails {
  id                  Int                       @id @default(autoincrement())
  companyId           Int
  numeroTrabajador    Int
  nombres             String
  apellidoPaterno     String
  apellidoMaterno     String?
  fechaNacimiento     DateTime
  sexo                SexoTrabajador?
  nacionalidad        NacionalidadTrabajador?
  estadoCivil         EstadoCivilTrabajador
  rfc                 String                    @db.VarChar(13)
  curp                String                    @db.VarChar(18)
  nss                 String                    @db.VarChar(11)
  umf                 Int?
  activo              Boolean                   @default(true)
  invitationSentAt    Boolean                   @default(false)
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  incidences          Incidence[]
  payrollItems        PayrollItem[]
  user                User?
  jefesAsignados      VinculacionJefeEmpleado[]
  vinculacionComoJefe VinculacionJefe?
  address             WorkerAddress?
  alimony             WorkerAlimony[]
  contractConditions  WorkerContractCondition?
  company             Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  documents           WorkerDocument[]
  familyMembers       WorkerFamilyMember[]
  fonacotCredits      WorkerFonacotCredit[]
  infonavitCredits    WorkerInfonavitCredit[]
  paymentData         WorkerPaymentData?

  @@unique([companyId, numeroTrabajador])
  @@unique([companyId, rfc])
  @@unique([companyId, curp])
  @@map("worker_details")
}

model WorkerAddress {
  id                Int           @id @default(autoincrement())
  workerDetailsId   Int           @unique
  correoElectronico String
  telefonoCelular   String        @db.VarChar(10)
  codigoPostal      String
  pais              String
  entidadFederativa String
  municipioAlcaldia String
  colonia           String?
  calle             String?
  numeroExterior    String?
  numeroInterior    String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  workerDetails     WorkerDetails @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@map("worker_addresses")
}

model WorkerContractCondition {
  id                       Int                  @id @default(autoincrement())
  workerDetailsId          Int                  @unique
  sucursal                 String               @default("MATRIZ")
  areaId                   Int?
  departmentId             Int?
  positionId               Int?
  regimenContratacion      RegimenContratacion
  zonaGeografica           ZonaGeografica
  tipoSalario              TipoSalario
  fechaIngreso             DateTime
  fechaAntiguedad          DateTime
  salarioDiario            Decimal              @db.Decimal(10, 2)
  sueldoBaseCotizacion     Decimal              @db.Decimal(10, 2)
  registroPatronal         String
  claseRiesgo              ClaseRiesgo
  tipoContrato             TipoContrato
  tipoTrabajador           TipoTrabajador
  situacionContractual     SituacionContractual
  duracionContrato         Int?
  calendarioNomina         String
  tipoJornada              TipoJornada
  horarioId                Int?
  modalidadTrabajo         ModalidadTrabajo
  observacion              String?
  presentaDeclaracionAnual Boolean              @default(false)
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  area                     Area?                @relation(fields: [areaId], references: [id])
  departamento             Departamento?        @relation(fields: [departmentId], references: [id])
  schedule                 WorkSchedule?        @relation(fields: [horarioId], references: [id])
  puesto                   Puesto?              @relation(fields: [positionId], references: [id])
  workerDetails            WorkerDetails        @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@map("worker_contract_conditions")
}

model WorkerPaymentData {
  id                    Int           @id @default(autoincrement())
  workerDetailsId       Int           @unique
  metodoPago            MetodoPago
  institucionFinanciera String?
  cuentaBancaria        String?
  cuentaClabe           String?       @db.VarChar(18)
  numeroTarjeta         String?       @db.VarChar(16)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  workerDetails         WorkerDetails @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@map("worker_payment_data")
}

model WorkerFamilyMember {
  id              Int                    @id @default(autoincrement())
  workerDetailsId Int
  nombreCompleto  String
  parentesco      Parentesco
  tipoDocumento   TipoDocumentoFamiliar?
  documentoUrl    String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  workerDetails   WorkerDetails          @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@index([workerDetailsId])
  @@map("worker_family_members")
}

model WorkerAlimony {
  id                    Int              @id @default(autoincrement())
  workerDetailsId       Int
  numeroJuicio          String
  tipoDescuento         TipoDescuento
  valor                 Decimal          @db.Decimal(10, 2)
  fechaInicio           DateTime
  nombreBeneficiario    String
  formaPago             FormaPagoPension
  institucionFinanciera String?
  cuentaBancaria        String?
  cuentaClabe           String?          @db.VarChar(18)
  numeroTarjeta         String?          @db.VarChar(16)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  workerDetails         WorkerDetails    @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@index([workerDetailsId])
  @@map("worker_alimony")
}

model WorkerInfonavitCredit {
  id              Int           @id @default(autoincrement())
  workerDetailsId Int
  numeroCredito   String
  tipoDescuento   TipoDescuento
  valor           Decimal       @db.Decimal(10, 2)
  fechaInicio     DateTime
  fechaTermino    DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  workerDetails   WorkerDetails @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@index([workerDetailsId])
  @@map("worker_infonavit_credits")
}

model WorkerFonacotCredit {
  id              Int           @id @default(autoincrement())
  workerDetailsId Int
  numeroCredito   String
  tipoDescuento   TipoDescuento
  valor           Decimal       @db.Decimal(10, 2)
  fechaInicio     DateTime
  fechaTermino    DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  workerDetails   WorkerDetails @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@index([workerDetailsId])
  @@map("worker_fonacot_credits")
}

model WorkerDocument {
  id                Int           @id @default(autoincrement())
  workerDetailsId   Int
  tipoDocumento     TipoDocumento
  nombreDocumento   String?
  documentoUrl      String
  fechaModificacion DateTime      @default(now())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  workerDetails     WorkerDetails @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@index([workerDetailsId])
  @@map("worker_documents")
}

model CompanyDocumentChecklist {
  id                        Int      @id @default(autoincrement())
  companyId                 Int      @unique
  constanciaSituacionFiscal Boolean  @default(false)
  altaPatronal              Boolean  @default(false)
  altaFonacot               Boolean  @default(false)
  sellosDigitales           Boolean  @default(false)
  catalogoTrabajadores      Boolean  @default(false)
  plantillaIncidencias      Boolean  @default(false)
  identificacion            Boolean  @default(false)
  cuentaBancaria            Boolean  @default(false)
  representanteLegal        Boolean  @default(false)
  actaConstitutiva          Boolean  @default(false)
  allDocumentsUploaded      Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  company                   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_document_checklist")
}

model CompanyDocument {
  id               Int          @id @default(autoincrement())
  companyId        Int
  documentType     DocumentType
  fileName         String
  filePath         String
  fileSize         Int
  mimeType         String
  uploadedBy       UserRole
  uploadedByUserId Int
  notes            String?
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  company          Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@map("company_documents")
}

model OperatorCompany {
  id             Int      @id @default(autoincrement())
  operatorId     Int
  companyId      Int
  assignedAt     DateTime @default(now())
  assignedBy     Int
  isActive       Boolean  @default(true)
  assignedByUser User     @relation("AssignedOperatorCompanies", fields: [assignedBy], references: [id])
  company        Company  @relation("CompanyOperators", fields: [companyId], references: [id])
  operator       User     @relation("OperatorCompanies", fields: [operatorId], references: [id])

  @@unique([operatorId, companyId])
  @@index([operatorId])
  @@index([companyId])
  @@map("operator_companies")
}

model Company {
  id                   Int                         @id @default(autoincrement())
  name                 String
  email                String
  phone                String?
  status               CompanyStatus               @default(IN_SETUP)
  employeesCount       Int                         @default(0)
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt
  managedByAdminId     Int?
  areas                Area[]
  calendars            Calendar[]
  managedByAdmin       User?                       @relation("AdminCompanies", fields: [managedByAdminId], references: [id])
  companyAddress       CompanyAddress?
  bank                 CompanyBank?
  benefitGroups        CompanyBenefitGroup[]
  benefits             CompanyBenefit[]
  digitalCertificate   CompanyDigitalCertificate?
  documentChecklist    CompanyDocumentChecklist?
  companyDocuments     CompanyDocument[]
  generalInfo          CompanyGeneralInfo?
  incidenceTemplates   CompanyIncidenceTemplate?
  incidenceTypes       CompanyIncidenceType[]
  legalRepresentative  CompanyLegalRepresentative?
  notarialPower        CompanyNotarialPower?
  policies             CompanyPolicy[]
  schedules            CompanySchedule[]
  wizard               CompanyWizard?
  departamentos        Departamento[]
  fonacot              Fonacot?
  imssRegistroPatronal IMSSRegistroPatronal?
  incidences           Incidence[]
  invitationTokens     InvitationToken[]
  notifications        Notification[]
  operatorCompanies    OperatorCompany[]           @relation("CompanyOperators")
  payrollCalendars     PayrollCalendar[]
  payrolls             Payroll[]
  puestos              Puesto[]
  requests             Request[]
  users                User[]
  vinculacionesJefe    VinculacionJefe[]
  wizardProgress       WizardProgress?
  workSchedules        WorkSchedule[]
  workerDetails        WorkerDetails[]

  @@index([status])
  @@map("companies")
}

model CompanyWizard {
  id              Int                    @id @default(autoincrement())
  companyId       Int                    @unique
  status          WizardStatus           @default(IN_PROGRESS)
  currentSection  Int                    @default(1)
  currentStep     Int                    @default(1)
  wizardData      Json                   @default("{}")
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  completedAt     DateTime?
  sectionProgress CompanyWizardSection[]
  company         Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_wizards")
}

model CompanyWizardSection {
  id            Int                 @id @default(autoincrement())
  wizardId      Int
  sectionNumber Int
  sectionName   String
  status        SectionStatus       @default(PENDING)
  isOptional    Boolean             @default(false)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  completedAt   DateTime?
  wizard        CompanyWizard       @relation(fields: [wizardId], references: [id], onDelete: Cascade)
  steps         CompanyWizardStep[]

  @@unique([wizardId, sectionNumber])
  @@map("company_wizard_sections")
}

model CompanyWizardStep {
  id          Int                  @id @default(autoincrement())
  sectionId   Int
  stepNumber  Int
  stepName    String
  status      StepStatus           @default(PENDING)
  isOptional  Boolean              @default(false)
  stepData    Json                 @default("{}")
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  completedAt DateTime?
  section     CompanyWizardSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([sectionId, stepNumber])
  @@map("company_wizard_steps")
}

model CompanyGeneralInfo {
  id                 Int       @id @default(autoincrement())
  companyId          Int       @unique
  businessName       String    @db.VarChar(100)
  commercialName     String?
  rfc                String
  tipoPersona        String?
  actividadEconomica String?
  taxRegime          String
  startDate          DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  company            Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_general_info")
}

model CompanyAddress {
  id             Int      @id @default(autoincrement())
  companyId      Int      @unique
  tipoDomicilio  String   @default("matriz")
  nombreSucursal String
  street         String
  exteriorNumber String
  interiorNumber String?
  neighborhood   String
  city           String
  state          String
  zipCode        String
  municipio      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_address")
}

model CompanyLegalRepresentative {
  id                   Int                 @id @default(autoincrement())
  companyId            Int                 @unique
  name                 String
  primerApellido       String?
  segundoApellido      String?
  tipoIdentificacionId Int?
  uriIdentificacion    String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  company              Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tipoIdentificacion   IdentificationType? @relation(fields: [tipoIdentificacionId], references: [id])

  @@map("company_legal_representative")
}

model CompanyNotarialPower {
  id                 Int        @id @default(autoincrement())
  companyId          Int        @unique
  folioPoderNotarial String?    @db.VarChar(25)
  fechaEmision       DateTime?
  fechaVigencia      DateTime?
  nombreFederatario  String?
  numeroFederatario  Int?
  estadoId           Int?
  municipioId        Int?
  uriPoderNotarial   String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  company            Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  estado             State?     @relation(fields: [estadoId], references: [id])
  municipio          Municipio? @relation(fields: [municipioId], references: [id])

  @@map("company_notarial_power")
}

model IMSSRegistroPatronal {
  id                  Int              @id @default(autoincrement())
  companyId           Int              @unique
  nomDomicilio        String?          @map("nomDomicilio")
  actividadEconomica  String?          @map("actividadEconomica")
  clvRegistroPatronal String?          @map("clvRegistroPatronal")
  claseRiesgoId       Int?             @map("claseRiesgoId")
  numFraccion         Int?             @map("numFraccion")
  numPrismaRiesgo     Decimal?         @map("numPrismaRiesgo") @db.Decimal(5, 2)
  fechaVigencia       DateTime?        @map("fechaVigencia")
  uriRegistroPatronal String?          @map("uriRegistroPatronal")
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  imssDomicilio       IMSSDomicilio?
  claseRiesgo         ClaseRiesgoIMSS? @relation(fields: [claseRiesgoId], references: [id])
  company             Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("imss_registro_patronal")
}

model Fonacot {
  id                Int       @id @default(autoincrement())
  companyId         Int       @unique
  registroPatronal  String?   @db.VarChar(7)
  fechaAfiliacion   DateTime?
  uriArchivoFonacot String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  company           Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("fonacot")
}

model Bank {
  id                 Int           @id @default(autoincrement())
  codigo             String        @unique @db.VarChar(10)
  nombre             String        @db.VarChar(200)
  nombreCorto        String?       @db.VarChar(50)
  activo             Boolean       @default(true)
  fechaCreacion      DateTime      @default(now())
  fechaActualizacion DateTime      @updatedAt
  companyBanks       CompanyBank[]

  @@map("cat_banks")
}

model CompanyBank {
  id                         Int      @id @default(autoincrement())
  companyId                  Int      @unique
  bankId                     Int
  nomCuentaBancaria          String
  numCuentaBancaria          String
  numClabeInterbancaria      String   @db.VarChar(18)
  numSucursal                String?  @db.VarChar(6)
  clvDispersion              Int?
  desCuentaBancaria          String?
  opcCuentaBancariaPrincipal Boolean? @default(false)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  bank                       Bank     @relation(fields: [bankId], references: [id])
  company                    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_banks")
}

model CompanyDigitalCertificate {
  id              Int       @id @default(autoincrement())
  companyId       Int       @unique
  certificateFile String
  keyFile         String
  password        String?
  validFrom       DateTime?
  validUntil      DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  company         Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_digital_certificates")
}

model Area {
  id                       Int                       @id @default(autoincrement())
  empresaId                Int
  nombre                   String
  descripcion              String?
  activo                   Boolean                   @default(true)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  empresa                  Company                   @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  departamentos            Departamento[]
  puestos                  Puesto[]
  vinculacionesJefe        VinculacionJefeArea[]
  workerContractConditions WorkerContractCondition[]

  @@unique([empresaId, nombre])
  @@map("areas")
}

model Departamento {
  id                       Int                           @id @default(autoincrement())
  empresaId                Int
  areaId                   Int?
  nombre                   String
  descripcion              String?
  activo                   Boolean                       @default(true)
  createdAt                DateTime                      @default(now())
  updatedAt                DateTime                      @updatedAt
  area                     Area?                         @relation(fields: [areaId], references: [id])
  empresa                  Company                       @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  puestos                  Puesto[]
  vinculacionesJefe        VinculacionJefeDepartamento[]
  workerContractConditions WorkerContractCondition[]

  @@unique([empresaId, nombre])
  @@map("departamentos")
}

model Puesto {
  id                       Int                       @id @default(autoincrement())
  empresaId                Int
  areaId                   Int?
  departamentoId           Int?
  nombre                   String
  activo                   Boolean                   @default(true)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  area                     Area?                     @relation(fields: [areaId], references: [id])
  departamento             Departamento?             @relation(fields: [departamentoId], references: [id])
  empresa                  Company                   @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  vinculacionesJefe        VinculacionJefePuesto[]
  workerContractConditions WorkerContractCondition[]

  @@unique([empresaId, nombre])
  @@map("puestos")
}

model CompanyBenefit {
  id          Int         @id @default(autoincrement())
  companyId   Int
  name        String
  type        BenefitType
  isLegal     Boolean     @default(false)
  percentage  Decimal?    @db.Decimal(5, 2)
  amount      Decimal?    @db.Decimal(10, 2)
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_benefits")
}

model CompanyBenefitGroup {
  id          Int      @id @default(autoincrement())
  companyId   Int
  name        String
  description String?
  benefits    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_benefit_groups")
}

model CompanySchedule {
  id        Int      @id @default(autoincrement())
  companyId Int
  name      String
  startTime String
  endTime   String
  breakTime Int?
  workDays  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_schedules")
}

model CompanyPolicy {
  id          Int        @id @default(autoincrement())
  companyId   Int
  name        String
  type        PolicyType
  description String?
  content     String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_policies")
}

model CatalogoModalidadTrabajo {
  id          Int      @id @default(autoincrement())
  codigo      String   @unique
  nombre      String
  descripcion String?
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cat_modalidad_trabajo")
}

model CatalogoTipoJornada {
  id          Int      @id @default(autoincrement())
  codigo      String   @unique
  nombre      String
  descripcion String?
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cat_tipo_jornada")
}

model CatalogoSituacionContractual {
  id          Int      @id @default(autoincrement())
  codigo      String   @unique
  nombre      String
  descripcion String?
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cat_situacion_contractual")
}

model CatalogoTipoTrabajador {
  id          Int      @id @default(autoincrement())
  codigo      String   @unique
  nombre      String
  descripcion String?
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cat_tipo_trabajador")
}

model CatalogoTipoSalario {
  id          Int      @id @default(autoincrement())
  codigo      String   @unique
  nombre      String
  descripcion String?
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cat_tipo_salario")
}

model CatalogoZonaGeografica {
  id          Int      @id @default(autoincrement())
  codigo      String   @unique
  nombre      String
  descripcion String?
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cat_zona_geografica")
}

model CatalogoTipoContrato {
  id          Int      @id @default(autoincrement())
  codigo      String   @unique
  nombre      String
  descripcion String?
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cat_tipo_contrato")
}

model CatalogoRegimenContratacion {
  id          Int      @id @default(autoincrement())
  codigo      String   @unique
  nombre      String
  descripcion String?
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cat_regimen_contratacion")
}

model CompanyIncidenceType {
  id          Int               @id @default(autoincrement())
  companyId   Int
  codigo      String
  nombre      String
  tipo        IncidenceCategory
  descripcion String?
  activo      Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  company     Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  incidences  Incidence[]

  @@unique([companyId, codigo])
  @@index([companyId, activo])
  @@map("company_incidence_types")
}

model CompanyIncidenceTemplate {
  id        Int      @id @default(autoincrement())
  companyId Int      @unique
  nombre    String
  headerRow Int      @default(1)
  mappings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_incidence_templates")
}

model VinculacionJefe {
  id              Int                           @id @default(autoincrement())
  empresaId       Int
  usuarioId       Int
  activo          Boolean                       @default(true)
  creadoEn        DateTime                      @default(now())
  actualizadoEn   DateTime                      @updatedAt
  workerDetailsId Int                           @unique
  areas           VinculacionJefeArea[]
  departamentos   VinculacionJefeDepartamento[]
  empleadosACargo VinculacionJefeEmpleado[]
  puestos         VinculacionJefePuesto[]
  empresa         Company                       @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  usuario         User                          @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  workerDetails   WorkerDetails                 @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@index([empresaId])
  @@index([usuarioId])
  @@map("vinculacion_jefes")
}

model VinculacionJefeArea {
  id                Int             @id @default(autoincrement())
  vinculacionJefeId Int
  areaId            Int
  creadoEn          DateTime        @default(now())
  area              Area            @relation(fields: [areaId], references: [id], onDelete: Cascade)
  vinculacionJefe   VinculacionJefe @relation(fields: [vinculacionJefeId], references: [id], onDelete: Cascade)

  @@unique([vinculacionJefeId, areaId])
  @@map("vinculacion_jefe_areas")
}

model VinculacionJefeDepartamento {
  id                Int             @id @default(autoincrement())
  vinculacionJefeId Int
  departamentoId    Int
  creadoEn          DateTime        @default(now())
  departamento      Departamento    @relation(fields: [departamentoId], references: [id], onDelete: Cascade)
  vinculacionJefe   VinculacionJefe @relation(fields: [vinculacionJefeId], references: [id], onDelete: Cascade)

  @@unique([vinculacionJefeId, departamentoId])
  @@map("vinculacion_jefe_departamentos")
}

model VinculacionJefePuesto {
  id                Int             @id @default(autoincrement())
  vinculacionJefeId Int
  puestoId          Int
  creadoEn          DateTime        @default(now())
  puesto            Puesto          @relation(fields: [puestoId], references: [id], onDelete: Cascade)
  vinculacionJefe   VinculacionJefe @relation(fields: [vinculacionJefeId], references: [id], onDelete: Cascade)

  @@unique([vinculacionJefeId, puestoId])
  @@map("vinculacion_jefe_puestos")
}

model VinculacionJefeEmpleado {
  id                Int             @id @default(autoincrement())
  vinculacionJefeId Int
  activo            Boolean         @default(true)
  creadoEn          DateTime        @default(now())
  actualizadoEn     DateTime        @updatedAt
  workerDetailsId   Int
  vinculacionJefe   VinculacionJefe @relation(fields: [vinculacionJefeId], references: [id], onDelete: Cascade)
  workerDetails     WorkerDetails   @relation(fields: [workerDetailsId], references: [id], onDelete: Cascade)

  @@unique([vinculacionJefeId, workerDetailsId])
  @@index([workerDetailsId])
  @@map("vinculacion_jefe_empleados")
}

model Request {
  id             Int                 @id @default(autoincrement())
  folio          String              @unique
  type           RequestType
  priority       RequestPriority
  subject        String
  description    String
  dueDate        DateTime?
  customFields   Json?
  status         RequestStatus       @default(OPEN)
  clientId       Int
  clientName     String
  companyId      Int
  assignedToId   Int?
  assignedToName String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  resolvedAt     DateTime?
  cancelledAt    DateTime?
  attachments    RequestAttachment[]
  comments       RequestComment[]
  history        RequestHistory[]
  assignedTo     User?               @relation("RequestAssignedTo", fields: [assignedToId], references: [id])
  client         User                @relation("RequestClient", fields: [clientId], references: [id])
  company        Company             @relation(fields: [companyId], references: [id])

  @@index([companyId, status])
  @@index([clientId])
  @@index([assignedToId])
  @@index([createdAt])
  @@map("requests")
}

model RequestComment {
  id          Int                 @id @default(autoincrement())
  text        String
  requestId   Int
  userId      Int
  userName    String
  userRole    UserRole
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  attachments RequestAttachment[]
  request     Request             @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user        User                @relation(fields: [userId], references: [id])

  @@index([requestId])
  @@map("request_comments")
}

model RequestAttachment {
  id             Int             @id @default(autoincrement())
  name           String
  size           Int
  type           String
  url            String
  path           String
  requestId      Int?
  commentId      Int?
  uploadedById   Int
  uploadedByName String
  createdAt      DateTime        @default(now())
  comment        RequestComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  request        Request?        @relation(fields: [requestId], references: [id], onDelete: Cascade)
  uploadedBy     User            @relation(fields: [uploadedById], references: [id])

  @@index([requestId])
  @@index([commentId])
  @@map("request_attachments")
}

model RequestHistory {
  id        Int      @id @default(autoincrement())
  action    String
  details   String
  requestId Int
  userId    Int
  userName  String
  metadata  Json?
  createdAt DateTime @default(now())
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([requestId])
  @@map("request_history")
}

enum UserRole {
  OPERATOR
  CLIENT
  EMPLOYEE
  ADMIN
  DEPARTMENT_HEAD
}

enum CompanyStatus {
  IN_SETUP
  CONFIGURED
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}

enum ContractType {
  INDEFINIDO
  TIEMPO_DETERMINADO
  MEDIO_TIEMPO
  CONTRATISTA
  PRACTICANTE
}

enum PayrollStatus {
  DRAFT
  CALCULATED
  PENDING_AUTHORIZATION
  AUTHORIZED
  PROCESSED
  TIMBERED
  ERROR
}

enum PayrollApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CFDIStatus {
  PENDING
  PROCESSING
  COMPLETED
  ERROR
}

enum IncidenceType {
  FALTAS
  PERMISOS
  VACACIONES
  TIEMPO_EXTRA
  BONOS
  INCENTIVOS
  PRIMA_DOMINICAL
  INCAPACIDADES
  OTROS
}

enum IncidenceStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
}

enum NotificationType {
  PAYROLL_PENDING_AUTHORIZATION
  PAYROLL_APPROVED
  PAYROLL_REJECTED
  PAYROLL_TIMBERED
  SYSTEM_ALERT
  REMINDER
  CHECKLIST_COMPLETED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum WizardStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum SectionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum BankType {
  CHECKING
  SAVINGS
  PAYROLL
}

enum BenefitType {
  PERCENTAGE
  FIXED_AMOUNT
  DAYS
  HOURS
}

enum PolicyType {
  ATTENDANCE
  VACATION
  REMOTE_WORK
  CODE_OF_CONDUCT
  OTHER
}

enum SexoTrabajador {
  MASCULINO
  FEMENINO
}

enum NacionalidadTrabajador {
  MEXICANA
  EXTRANJERA
}

enum EstadoCivilTrabajador {
  SOLTERO
  CASADO
  DIVORCIADO
  VIUDO
  UNION_LIBRE
}

enum RegimenContratacion {
  ASIMILADOS_ACCIONES
  ASIMILADOS_COMISIONISTAS
  ASIMILADOS_HONORARIOS
  ASIMILADOS_INTEGRANTES_SOCIEDADES
  ASIMILADOS_MIEMBROS_CONSEJOS
  ASIMILADOS_MIEMBROS_COOPERATIVAS
  ASIMILADOS_OTROS
  JUBILADOS
  SUELDOS
}

enum ZonaGeografica {
  RESTO_PAIS
  ZONA_FRONTERA_NORTE
}

enum TipoSalario {
  FIJO
  MIXTO
  VARIABLE
}

enum ClaseRiesgo {
  CLASE_I
  CLASE_II
  CLASE_III
  CLASE_IV
  CLASE_V
}

enum TipoContrato {
  PERIODO_PRUEBA
  CAPACITACION_INICIAL
  OBRA_TIEMPO_DETERMINADO
  TEMPORADA
  TIEMPO_INDETERMINADO
  PRACTICAS_PROFESIONALES
  TELETRABAJO
}

enum TipoTrabajador {
  CONFIANZA
  PRACTICANTE
}

enum SituacionContractual {
  EVENTUAL
  EVENTUAL_CONSTRUCCION
  EVENTUAL_CAMPO
  PERMANENTE
}

enum TipoJornada {
  DIURNA
  MIXTA
  NOCTURNA
}

enum ModalidadTrabajo {
  MIXTO
  PRESENCIAL
  TELETRABAJO
}

enum MetodoPago {
  TRANSFERENCIA
  CHEQUE_NOMINATIVO
  EFECTIVO
}

enum Parentesco {
  CONCUBINA
  CONCUBINO
  ESPOSA
  ESPOSO
  HIJA
  HIJO
  MADRE
  PADRE
}

enum TipoDocumentoFamiliar {
  ACTA_NACIMIENTO
  ACTA_MATRIMONIO
  INE
}

enum TipoDescuento {
  CUOTA_FIJA
  PORCENTAJE
  FACTOR_DESCUENTO
}

enum FormaPagoPension {
  CHEQUE
  TRANSFERENCIA
}

enum TipoDocumento {
  AVISO_RETENCION_INFONAVIT
  AVISO_SUSPENSION_INFONAVIT
  CARTA_RECOMENDACION
  CURP
  COMPROBANTE_DOMICILIO
  COMPROBANTE_ESTUDIOS
  RFC
  CURRICULUM_VITAE
  IDENTIFICACION_OFICIAL
  NSS
  OFICIO_RETENCION_PENSION
  SOLICITUD_EMPLEO
  TARJETA_RESIDENCIA
  OTRO
}

enum DocumentType {
  CONSTANCIA_SITUACION_FISCAL
  ALTA_PATRONAL
  ALTA_FONACOT
  SELLOS_DIGITALES
  CATALOGO_TRABAJADORES
  PLANTILLA_INCIDENCIAS
  IDENTIFICACION
  CUENTA_BANCARIA
  REPRESENTANTE_LEGAL
  ACTA_CONSTITUTIVA
}

enum IncidenceCategory {
  DEDUCCION
  PERCEPCION
}

enum RequestType {
  EMPLOYEE_REGISTRATION
  EMPLOYEE_TERMINATION
  SALARY_MODIFICATION
  PAYROLL_CORRECTION
  GENERAL_INQUIRY
}

enum RequestPriority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum RequestStatus {
  OPEN
  IN_PROGRESS
  PENDING_INFO
  RESOLVED
  CANCELLED
}
