export interface CreateEmployeeRequest {
    employeeNumber: string;
    name: string;
    email: string;
    rfc: string;
    position: string;
    department: string;
    salary: number;
    hireDate: string;
    companyId: number;
    bankName?: string;
    accountNumber?: string;
    clabe?: string;
}
export interface UpdateEmployeeRequest extends Partial<CreateEmployeeRequest> {
    id: number;
}
export declare class EmployeeService {
    static getAllEmployees(companyId?: number, status?: string): Promise<{
        id: number;
        employeeNumber: string;
        name: string;
        email: string | null;
        rfc: string;
        position: string;
        department: string;
        salary: any;
        hireDate: string;
        status: string;
        companyId: number;
        companyName: any;
        bankName: string | null;
        accountNumber: string | null;
        clabe: string | null;
        incidencesCount: any;
        payrollsCount: any;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    static getEmployeeById(id: number): Promise<{
        id: number;
        employeeNumber: string;
        name: string;
        email: string | null;
        rfc: string;
        position: string;
        department: string;
        salary: any;
        hireDate: string;
        status: string;
        companyId: number;
        companyName: any;
        bankName: string | null;
        accountNumber: any;
        clabe: string | null;
        incidences: any;
        payrollDetails: any;
        createdAt: Date;
        updatedAt: Date;
    }>;
    static createEmployee(data: CreateEmployeeRequest): Promise<{
        id: number;
        employeeNumber: string;
        name: string;
        email: string | null;
        rfc: string;
        position: string;
        department: string;
        salary: any;
        hireDate: string;
        status: string;
        companyId: number;
        createdAt: Date;
        updatedAt: Date;
    }>;
    static updateEmployee(data: UpdateEmployeeRequest): Promise<{
        id: number;
        employeeNumber: string;
        name: string;
        email: string | null;
        rfc: string;
        position: string;
        department: string;
        salary: any;
        hireDate: string;
        status: string;
        companyId: number;
        bankName: string | null;
        accountNumber: any;
        clabe: string | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    static deleteEmployee(id: number): Promise<{
        message: string;
        employeeId: number;
    }>;
    static getEmployeeStats(companyId?: number): Promise<{
        total: any;
        averageSalary: any;
        minSalary: any;
        maxSalary: any;
        byStatus: import(".prisma/client").Prisma.PickEnumerable<import(".prisma/client").Prisma.EmployeeGroupByOutputType, import(".prisma/client").Prisma.EmployeeScalarFieldEnum | import(".prisma/client").Prisma.EmployeeScalarFieldEnum[]> & {
            _count: true | {
                id?: number | undefined;
                employeeNumber?: number | undefined;
                name?: number | undefined;
                email?: number | undefined;
                rfc?: number | undefined;
                position?: number | undefined;
                department?: number | undefined;
                status?: number | undefined;
                hireDate?: number | undefined;
                contractType?: number | undefined;
                workSchedule?: number | undefined;
                baseSalary?: number | undefined;
                dateOfBirth?: number | undefined;
                address?: number | undefined;
                phone?: number | undefined;
                emergencyContact?: number | undefined;
                bankName?: number | undefined;
                bankAccount?: number | undefined;
                clabe?: number | undefined;
                taxRegime?: number | undefined;
                companyId?: number | undefined;
                createdAt?: number | undefined;
                updatedAt?: number | undefined;
                _all?: number | undefined;
            } | undefined;
            _avg: {
                id?: number | null | undefined;
                baseSalary?: import("@prisma/client/runtime/library").Decimal | null | undefined;
                companyId?: number | null | undefined;
            } | undefined;
            _sum: {
                id?: number | null | undefined;
                baseSalary?: import("@prisma/client/runtime/library").Decimal | null | undefined;
                companyId?: number | null | undefined;
            } | undefined;
            _min: {
                id?: number | null | undefined;
                employeeNumber?: string | null | undefined;
                name?: string | null | undefined;
                email?: string | null | undefined;
                rfc?: string | null | undefined;
                position?: string | null | undefined;
                department?: string | null | undefined;
                status?: import(".prisma/client").$Enums.EmployeeStatus | null | undefined;
                hireDate?: Date | null | undefined;
                contractType?: import(".prisma/client").$Enums.ContractType | null | undefined;
                workSchedule?: string | null | undefined;
                baseSalary?: import("@prisma/client/runtime/library").Decimal | null | undefined;
                dateOfBirth?: Date | null | undefined;
                address?: string | null | undefined;
                phone?: string | null | undefined;
                emergencyContact?: string | null | undefined;
                bankName?: string | null | undefined;
                bankAccount?: string | null | undefined;
                clabe?: string | null | undefined;
                taxRegime?: string | null | undefined;
                companyId?: number | null | undefined;
                createdAt?: Date | null | undefined;
                updatedAt?: Date | null | undefined;
            } | undefined;
            _max: {
                id?: number | null | undefined;
                employeeNumber?: string | null | undefined;
                name?: string | null | undefined;
                email?: string | null | undefined;
                rfc?: string | null | undefined;
                position?: string | null | undefined;
                department?: string | null | undefined;
                status?: import(".prisma/client").$Enums.EmployeeStatus | null | undefined;
                hireDate?: Date | null | undefined;
                contractType?: import(".prisma/client").$Enums.ContractType | null | undefined;
                workSchedule?: string | null | undefined;
                baseSalary?: import("@prisma/client/runtime/library").Decimal | null | undefined;
                dateOfBirth?: Date | null | undefined;
                address?: string | null | undefined;
                phone?: string | null | undefined;
                emergencyContact?: string | null | undefined;
                bankName?: string | null | undefined;
                bankAccount?: string | null | undefined;
                clabe?: string | null | undefined;
                taxRegime?: string | null | undefined;
                companyId?: number | null | undefined;
                createdAt?: Date | null | undefined;
                updatedAt?: Date | null | undefined;
            } | undefined;
        };
        byDepartment: import(".prisma/client").Prisma.PickEnumerable<import(".prisma/client").Prisma.EmployeeGroupByOutputType, import(".prisma/client").Prisma.EmployeeScalarFieldEnum | import(".prisma/client").Prisma.EmployeeScalarFieldEnum[]> & {
            _count: true | {
                id?: number | undefined;
                employeeNumber?: number | undefined;
                name?: number | undefined;
                email?: number | undefined;
                rfc?: number | undefined;
                position?: number | undefined;
                department?: number | undefined;
                status?: number | undefined;
                hireDate?: number | undefined;
                contractType?: number | undefined;
                workSchedule?: number | undefined;
                baseSalary?: number | undefined;
                dateOfBirth?: number | undefined;
                address?: number | undefined;
                phone?: number | undefined;
                emergencyContact?: number | undefined;
                bankName?: number | undefined;
                bankAccount?: number | undefined;
                clabe?: number | undefined;
                taxRegime?: number | undefined;
                companyId?: number | undefined;
                createdAt?: number | undefined;
                updatedAt?: number | undefined;
                _all?: number | undefined;
            } | undefined;
            _avg: {
                id?: number | null | undefined;
                baseSalary?: import("@prisma/client/runtime/library").Decimal | null | undefined;
                companyId?: number | null | undefined;
            } | undefined;
            _sum: {
                id?: number | null | undefined;
                baseSalary?: import("@prisma/client/runtime/library").Decimal | null | undefined;
                companyId?: number | null | undefined;
            } | undefined;
            _min: {
                id?: number | null | undefined;
                employeeNumber?: string | null | undefined;
                name?: string | null | undefined;
                email?: string | null | undefined;
                rfc?: string | null | undefined;
                position?: string | null | undefined;
                department?: string | null | undefined;
                status?: import(".prisma/client").$Enums.EmployeeStatus | null | undefined;
                hireDate?: Date | null | undefined;
                contractType?: import(".prisma/client").$Enums.ContractType | null | undefined;
                workSchedule?: string | null | undefined;
                baseSalary?: import("@prisma/client/runtime/library").Decimal | null | undefined;
                dateOfBirth?: Date | null | undefined;
                address?: string | null | undefined;
                phone?: string | null | undefined;
                emergencyContact?: string | null | undefined;
                bankName?: string | null | undefined;
                bankAccount?: string | null | undefined;
                clabe?: string | null | undefined;
                taxRegime?: string | null | undefined;
                companyId?: number | null | undefined;
                createdAt?: Date | null | undefined;
                updatedAt?: Date | null | undefined;
            } | undefined;
            _max: {
                id?: number | null | undefined;
                employeeNumber?: string | null | undefined;
                name?: string | null | undefined;
                email?: string | null | undefined;
                rfc?: string | null | undefined;
                position?: string | null | undefined;
                department?: string | null | undefined;
                status?: import(".prisma/client").$Enums.EmployeeStatus | null | undefined;
                hireDate?: Date | null | undefined;
                contractType?: import(".prisma/client").$Enums.ContractType | null | undefined;
                workSchedule?: string | null | undefined;
                baseSalary?: import("@prisma/client/runtime/library").Decimal | null | undefined;
                dateOfBirth?: Date | null | undefined;
                address?: string | null | undefined;
                phone?: string | null | undefined;
                emergencyContact?: string | null | undefined;
                bankName?: string | null | undefined;
                bankAccount?: string | null | undefined;
                clabe?: string | null | undefined;
                taxRegime?: string | null | undefined;
                companyId?: number | null | undefined;
                createdAt?: Date | null | undefined;
                updatedAt?: Date | null | undefined;
            } | undefined;
        };
    }>;
    private static mapStatusToFrontend;
}
//# sourceMappingURL=employeeService.d.ts.map